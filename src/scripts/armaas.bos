#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, missileemitt1, missileemitt2, base, missilebox1, missilebox2, turretgun1,
       turretgun2, wake1, wake2, gunbarrel1, gunbarrel2;

static-var  gun_3, restore_delay, gun_2, gun_3_yaw;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8

#define SIG_ROCK_Z				16		//Signal to prevent multiple rocking. REPLACE!
#define ROCK_PIECE				base	//piece to rock. REPLACE!
#define ROCK_Z_SPEED			3		//Number of half-cycles per second around z-axis.
#define ROCK_Z_DECAY			-1/2		//Rocking around z-axis is reduced by this factor each time; should be negative to alternate rocking direction.
#define ROCK_Z_MIN              <0.5>	//If around z-axis rock is not greater than this amount, rocking will stop after returning to center.

#define ROCK_Z_FIRE_3		-5

#include "rockz.h"


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare2;
	hide flare1;
	gun_3 = flare1;
	gun_2 = flare1;
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script RockZInit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turretgun1 to y-axis <0.000000> speed <75.000000>;
	turn turretgun2 to x-axis <0.000000> speed <75.000000>;
	turn missilebox1 to y-axis <0.000000> speed <75.000000>;
	turn missilebox1 to x-axis <0.000000> speed <75.000000>;
	turn missilebox2 to y-axis <0.000000> speed <75.000000>;
	turn missilebox2 to x-axis <0.000000> speed <75.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimSecondary(heading, pitch)
{
	start-script RockZ(ROCK_Z_FIRE_3, gun_3_yaw);
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( gun_2 == 0 )
	{
		turn missilebox1 to y-axis heading speed <455.000000>;
		turn missilebox1 to x-axis <0.000000> - pitch speed <430.000000>;
		wait-for-turn missilebox1 around y-axis;
		wait-for-turn missilebox1 around x-axis;
	}
	if( gun_2 == 1 )
	{
		turn missilebox2 to y-axis heading speed <455.000000>;
		turn missilebox2 to x-axis <0.000000> - pitch speed <430.000000>;
		wait-for-turn missilebox2 around y-axis;
		wait-for-turn missilebox2 around x-axis;
	}
	start-script RestoreAfterDelay();
	gun_3_yaw = heading;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turretgun1 to y-axis heading speed <755.000000>;
	turn turretgun2 to x-axis <0.000000> - pitch speed <730.000000>;
	wait-for-turn turretgun1 around y-axis;
	wait-for-turn turretgun2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	++gun_2;
	if( gun_2 == 2 )
	{
		gun_2 = flare1;
	}
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		gun_3 = flare2;
		return (0);
	}
	if( gun_3 == 1 )
	{
		gun_3 = flare1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = missilebox1;
	}
	if( gun_2 == 1 )
	{
		piecenum = missilebox2;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turretgun1;
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = missileemitt1;
	}
	if( gun_2 == 1 )
	{
		piecenum = missileemitt2;
	}
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_3 == 1 )
	{
		piecenum = flare2;
	}
}

AimWeapon4(Func_Var_1, Func_Var_2)
{
	sleep 100;
	return (1);
}

FireWeapon4()
{
	sleep 100;
}

QueryWeapon4(Func_Var_1)
{
	sleep 100;
}

AimFromWeapon4(Func_Var_1)
{
	Func_Var_1 = 4;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox1 type BITMAPONLY | BITMAP2;
		explode missilebox2 type BITMAPONLY | BITMAP3;
		explode missileemitt1 type BITMAPONLY | BITMAP4;
		explode missileemitt2 type BITMAPONLY | BITMAP5;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode gunbarrel1 type BITMAPONLY | BITMAP3;
		explode gunbarrel2 type BITMAPONLY | BITMAP4;
		explode turretgun1 type BITMAPONLY | BITMAP1;
		explode turretgun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox1 type SHATTER | BITMAP2;
		explode missilebox2 type BITMAPONLY | BITMAP3;
		explode missileemitt1 type FALL | BITMAP4;
		explode missileemitt2 type FALL | BITMAP5;
		explode flare1 type FALL | BITMAP1;
		explode flare2 type FALL | BITMAP2;
		explode gunbarrel1 type BITMAPONLY | BITMAP3;
		explode gunbarrel2 type BITMAPONLY | BITMAP4;
		explode turretgun1 type FALL | BITMAP1;
		explode turretgun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox1 type SHATTER | BITMAP2;
		explode missilebox2 type BITMAPONLY | BITMAP3;
		explode missileemitt1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode missileemitt2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode flare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gunbarrel1 type BITMAPONLY | BITMAP3;
		explode gunbarrel2 type BITMAPONLY | BITMAP4;
		explode turretgun1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode turretgun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode missilebox1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode missilebox2 type BITMAPONLY | BITMAP3;
	explode missileemitt1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode missileemitt2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode flare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode gunbarrel1 type BITMAPONLY | BITMAP3;
	explode gunbarrel2 type BITMAPONLY | BITMAP4;
	explode turretgun1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode turretgun2 type BITMAPONLY | BITMAP2;
}
