#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arm, turret, gun, ledgun, radar, barrel, fire,
       antenna, door1, door2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <80.000000>;
		turn door2 to z-axis <0.000000> speed <80.000000>;
		wait-for-turn door1 around z-axis;
		move arm to y-axis [0.000000] speed [12.000000];
		turn antenna to x-axis <0.000000> speed <50.000000>;
		sleep 200;
		move barrel to z-axis [0.000000] speed [7.000000];
		move ledgun to z-axis [0.000000] speed [7.000000];
		wait-for-move barrel along z-axis;
		wait-for-move ledgun along z-axis;
	}
	sleep 40;
}

deactivatescr()
{
	if( TRUE )
	{
		turn turret to y-axis <0.000000> speed <50.000000>;
		turn gun to x-axis <0.000000> speed <40.000000>;
		move barrel to z-axis [-8.000000] speed [7.000000];
		move ledgun to z-axis [-4.400000] speed [7.000000];
		turn antenna to x-axis <90.000000> speed <50.000000>;
		wait-for-turn turret around y-axis;
		wait-for-turn gun around x-axis;
	}
	if( TRUE )
	{
		move arm to y-axis [-17.000000] speed [12.000000];
		wait-for-move arm along y-axis;
		turn door1 to z-axis <90.000000> speed <80.000000>;
		turn door2 to z-axis <-90.000000> speed <80.000000>;
		wait-for-turn door1 around z-axis;
		wait-for-turn door2 around z-axis;
	}
	sleep 40;
}

Go()
{
	set ARMORED to 0;
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	spin radar around y-axis speed <100.000000>;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	stop-spin radar around y-axis;
	turn radar to y-axis <0.000000> speed <100.000000>;
	call-script deactivatescr();
	set ARMORED to 1;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	Static_Var_2 = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_AIM;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( Static_Var_1 == 0 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <50.000000>;
	turn gun to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	return (1);
}

TargetCleared(Func_Var_1)
{
	stop-spin turret around y-axis;
	stop-spin gun around x-axis;
}

FirePrimary()
{
}

QueryPrimary(piecenum)
{
	piecenum = fire;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode arm type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode ledgun type BITMAPONLY | BITMAP5;
		explode radar type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP2;
		explode fire type BITMAPONLY | BITMAP3;
		explode antenna type BITMAPONLY | BITMAP4;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode arm type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode gun type SHATTER | BITMAP4;
		explode ledgun type BITMAPONLY | BITMAP5;
		explode radar type BITMAPONLY | BITMAP1;
		explode barrel type FALL | BITMAP2;
		explode fire type BITMAPONLY | BITMAP3;
		explode antenna type FALL | BITMAP4;
		explode door1 type FALL | BITMAP5;
		explode door2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode arm type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode gun type SHATTER | BITMAP4;
		explode ledgun type BITMAPONLY | BITMAP5;
		explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire type BITMAPONLY | BITMAP3;
		explode antenna type FALL | BITMAP4;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode arm type BITMAPONLY | BITMAP2;
	explode turret type BITMAPONLY | BITMAP3;
	explode gun type SHATTER | BITMAP4;
	explode ledgun type BITMAPONLY | BITMAP5;
	explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire type BITMAPONLY | BITMAP3;
	explode antenna type FALL | BITMAP4;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
