//linear constant 65536

#include "sfxtype.h"
#include "exptype.h"

piece	base, body, rfjet, lfjet, rffan, lffan, rgun, rbarrel, rflare1, rflare2, lgun, lbarrel, lflare1, lflare2,
		eye, rthruster, rrjet, rrfanbase, rrfan, lthruster, lrjet, lrfanbase, lrfan;

static-var gun1, statechg_DesiredState, statechg_StateChanging, attacking, moverate;

#define SIG_AIM1 2

activatescr()
{
	if( TRUE )
	{
		spin rffan around y-axis speed <360> accelerate <360>;
		spin lffan around y-axis speed <360> accelerate <360>;
		spin rrfan around y-axis speed <360> accelerate <360>;
		spin lrfan around y-axis speed <360> accelerate <360>;
		sleep 30;
	}
	sleep 30;
}

deactivatescr()
{
	if( TRUE )
	{
		sleep 3000;
	}
	
	if( TRUE )
	{
		stop-spin rffan around y-axis decelerate <1>;
		stop-spin lffan around y-axis decelerate <1>;
		stop-spin rrfan around y-axis decelerate <1>;
		stop-spin lrfan around y-axis decelerate <1>;
		sleep 30;
	}
	sleep 30;
}

TiltBody()
{
	while( TRUE )
	{
		if( attacking )
		{
			turn body to x-axis <0> speed <45>;
			turn rthruster to x-axis <0> speed <45>;
			turn lthruster to x-axis <0> speed <45>;
			sleep 250;
		}
		if( !attacking && moverate > 1 )
		{
			turn body to x-axis <22.5> speed <45>;
			turn rthruster to x-axis <22.5> speed <45>;
			turn lthruster to x-axis <22.5> speed <45>;
			sleep 250;
		}
		if( !attacking && moverate < 2 )
		{
			turn body to x-axis <0> speed <45>;
			turn rthruster to x-axis <0> speed <45>;
			turn lthruster to x-axis <0> speed <45>;
			sleep 250;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{	
	turn rfjet to x-axis <-90> now;
	turn lfjet to x-axis <-90> now;
	turn rrjet to x-axis <-90> now;
	turn lrjet to x-axis <-90> now;

	turn rrfanbase to z-axis <-22.5> now;
	turn lrfanbase to z-axis <22.5> now;

	call-script InitState();
	start-script SmokeUnit();
	start-script TiltBody();
}

RestoreAfterDelay()
{
	sleep 3000;
	attacking = 0;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimWeapon1(heading,pitch)
{
	
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;

	attacking = 1;
	sleep 30;
	
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon1(piecenum)
{
	if( gun1 == 0 )
	{
		piecenum = rflare1;
	}
	if( gun1 == 1 )
	{
		piecenum = lflare1;
	}
	if( gun1 == 2 )
	{
		piecenum = rflare2;
	}
	if( gun1 == 3 )
	{
		piecenum = lflare2;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = eye;
}

Shot1()
{
	if( gun1 == 0 )
	{
		emit-sfx 1024 from rflare1;
		emit-sfx 1025 from rbarrel;
		sleep 60;
	}
	if( gun1 == 1 )
	{
		emit-sfx 1024 from lflare1;
		emit-sfx 1025 from lbarrel;
		sleep 60;
	}
	if( gun1 == 2 )
	{
		emit-sfx 1024 from rflare2;
		emit-sfx 1025 from rbarrel;
		sleep 60;
	}
	if( gun1 == 3 )
	{
		emit-sfx 1024 from lflare2;
		emit-sfx 1025 from lbarrel;
		sleep 60;
	}
	gun1 = 1 + gun1;

	if( gun1 == 4 )
	{
		gun1 = 0;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

MoveRate0()
{
	moverate = 0;
}

MoveRate1()
{
	moverate = 1;
}

MoveRate2()
{
	moverate = 2;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode rthruster type BITMAPONLY | BITMAP5;
		explode lthruster type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode rthruster type FALL | BITMAP2;
		explode lthruster type FALL | BITMAP3;
		explode rffan type SHATTER | BITMAP1;
		explode lffan type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode rthruster type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthruster type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rffan type FALL | BITMAP2;
		explode lffan type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 2;
	explode base type SHATTER | BITMAP1;
	explode rthruster type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthruster type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rffan type FALL | BITMAP2;
	explode lffan type FALL | BITMAP3;
}
