#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  muzzle2a, flare1b, flare2b, base, wing1, wing2, tail1, tail2,
       weapon1, weapon2, flare1a, flare2a, muzzle1a, muzzle1b, muzzle2b, ejector1a,
       ejector1b, ejector2a, ejector2b;

static-var  gun_1, statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [0.000000] now;
		move wing1 to x-axis [2.900000] speed [2.000000];
		move wing2 to x-axis [0.000000] now;
		move wing2 to x-axis [-2.900000] speed [2.000000];
		turn tail1 to z-axis <0.000000> now;
		turn tail1 to z-axis <56.005495> speed <56.000000>;
		turn tail2 to z-axis <0.000000> now;
		turn tail2 to z-axis <-65.005495> speed <66.000000>;
		sleep 998;
	}
	if( TRUE )
	{
		move weapon1 to x-axis [-3.000000] speed [2.000000];
		move weapon2 to x-axis [3.000000] speed [2.000000];
		sleep 1008;
	}
	sleep 102;
}

deactivatescr()
{
	if( TRUE )
	{
		move weapon1 to x-axis [-3.000000] now;
		move weapon1 to x-axis [0.000000] speed [2.000000];
		move weapon2 to x-axis [3.000000] now;
		move weapon2 to x-axis [0.000000] speed [2.000000];
		move wing1 to x-axis [2.900000] now;
		move wing2 to x-axis [-2.900000] now;
		turn tail1 to z-axis <56.005495> now;
		turn tail2 to z-axis <-65.714286> now;
		sleep 998;
	}
	if( TRUE )
	{
		move wing1 to x-axis [0.000000] speed [2.000000];
		move wing2 to x-axis [0.000000] speed [2.000000];
		turn tail1 to z-axis <0.000000> speed <55.000000>;
		turn tail2 to z-axis <0.000000> speed <65.000000>;
		sleep 1008;
	}
	sleep 71;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide muzzle1a;
	hide muzzle1b;
	hide muzzle2a;
	hide muzzle2b;
	hide ejector2a;
	hide ejector2b;
	hide ejector1a;
	hide ejector1b;
	gun_1 = 1;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

FireWeapon1()
{
	gun_1 = 0;
}

Shot1() {
	++gun_1;
	if( gun_1 == 1 ) {
		emit-sfx 1024 from muzzle1a;
		emit-sfx 1024 + 1 from ejector1a;
	} else if( gun_1 == 2 ) {
		emit-sfx 1024 from muzzle1b;
		emit-sfx 1024 + 1 from ejector1b;
	} else if( gun_1 == 3 ) {
		emit-sfx 1024 from muzzle2a;
		emit-sfx 1024 + 1 from ejector2a;
	} else {
		emit-sfx 1024 from muzzle2b;
		emit-sfx 1024 + 1 from ejector2b;
	}
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 1 ) {
		piecenum = flare1a;
	} else if( gun_1 == 2 ) {
		piecenum = flare1b;
	} else if( gun_1 == 3 ) {
		piecenum = flare2a;
	} else {
		piecenum = flare2b;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare2a;
	hide flare1b;
	hide flare2b;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type BITMAPONLY | BITMAP2;
		explode flare2a type BITMAPONLY | BITMAP3;
		explode flare1b type BITMAPONLY | BITMAP4;
		explode flare2b type BITMAPONLY | BITMAP5;
		explode tail1 type BITMAPONLY | BITMAP1;
		explode tail2 type BITMAPONLY | BITMAP2;
		explode weapon1 type BITMAPONLY | BITMAP3;
		explode weapon2 type BITMAPONLY | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | BITMAP2;
		explode flare2a type FALL | BITMAP3;
		explode flare1b type FALL | BITMAP4;
		explode flare2b type FALL | BITMAP5;
		explode tail1 type FALL | BITMAP1;
		explode tail2 type FALL | BITMAP2;
		explode weapon1 type BITMAPONLY | BITMAP3;
		explode weapon2 type SHATTER | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode weapon1 type BITMAPONLY | BITMAP3;
		explode weapon2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 1;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode weapon1 type BITMAPONLY | BITMAP3;
	explode weapon2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wing1 type BITMAPONLY | BITMAP5;
	explode wing2 type BITMAPONLY | BITMAP1;
}
