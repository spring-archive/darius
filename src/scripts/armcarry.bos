#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, wake1, wake2, wake3, wake4, radar, landpad1, landpad2,
       landpad3, landpad4, landpad5, landpad6, landpad7, landpad8, landpad9, hatch1,
       hatch2, hatch3, hatch4, hatch5, hole1, hole2, hole3, hole4, hole5, muzzle1, muzzle2,
       muzzle3, muzzle4, muzzle5;

static-var  Static_Var_1, gun_1, Static_Var_3, Static_Var_4, gun_2,
            Static_Var_6;

// Signal definitions
#define SIG_AIM				1
#define SIG_MOVE			2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = body;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	gun_2 = wake1;
	Static_Var_6 = 1;
	hide muzzle1;
	hide muzzle2;
	hide muzzle3;
	hide muzzle4;
	hide muzzle5;
	Static_Var_1 = 0;
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin radar around y-axis speed <60.005495>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

RestoreAfterDelay()
{
	sleep 3000;
	turn hatch1 to x-axis <0.000000> speed <35.005495>;
	turn hatch2 to x-axis <0.000000> speed <35.005495>;
	turn hatch3 to x-axis <0.000000> speed <35.005495>;
	turn hatch4 to x-axis <0.000000> speed <35.005495>;
	turn hatch5 to x-axis <0.000000> speed <35.005495>;
}

QueryPrimary(piecenum)
{
	piecenum = radar;
}

AimFromPrimary(piecenum)
{
	piecenum = radar;
}

AimPrimary(piecenum)
{
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( Static_Var_6 == 0 )
	{
		while( TRUE )
		{
			sleep 500;
		}
	}
	if( Static_Var_6 == 1 )
	{
		turn hatch1 to x-axis <-90.000000> speed <180.000000>;
		wait-for-turn hatch1 around x-axis;
	}
	if( Static_Var_6 == 2 )
	{
		turn hatch2 to x-axis <-90.000000> speed <180.000000>;
		wait-for-turn hatch2 around x-axis;
	}
	if( Static_Var_6 == 3 )
	{
		turn hatch3 to x-axis <-90.000000> speed <180.000000>;
		wait-for-turn hatch3 around x-axis;
	}
	if( Static_Var_6 == 4 )
	{
		turn hatch4 to x-axis <-90.000000> speed <180.000000>;
		wait-for-turn hatch4 around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( Static_Var_6 == 1 )
	{
//		emit-sfx 1024 + 0 from muzzle1;
	}
	if( Static_Var_6 == 2 )
	{
//		emit-sfx 1024 + 0 from muzzle2;
	}
	if( Static_Var_6 == 3 )
	{
//		emit-sfx 1024 + 0 from muzzle3;
	}
	if( Static_Var_6 == 4 )
	{
//		emit-sfx 1024 + 0 from muzzle4;
	}
	sleep 1300;
	gun_2 = Static_Var_6;
	Static_Var_6 = 0;
	turn hatch1 to x-axis <0.000000> speed <35.005495>;
	turn hatch2 to x-axis <0.000000> speed <35.005495>;
	turn hatch3 to x-axis <0.000000> speed <35.005495>;
	turn hatch4 to x-axis <0.000000> speed <35.005495>;
	sleep 3000;
	Static_Var_6 = gun_2;
	++Static_Var_6;
	if( Static_Var_6 == 5 )
	{
		Static_Var_6 = 1;
	}
}

AimFromSecondary(piecenum)
{
	if( Static_Var_6 == 1 )
	{
		piecenum = hole1;
	}
	if( Static_Var_6 == 2 )
	{
		piecenum = hole2;
	}
	if( Static_Var_6 == 3 )
	{
		piecenum = hole3;
	}
	if( Static_Var_6 == 4 )
	{
		piecenum = hole4;
	}
}

QuerySecondary(piecenum)
{
	if( Static_Var_6 == 1 )
	{
		piecenum = hole1;
	}
	if( Static_Var_6 == 2 )
	{
		piecenum = hole2;
	}
	if( Static_Var_6 == 3 )
	{
		piecenum = hole3;
	}
	if( Static_Var_6 == 4 )
	{
		piecenum = hole4;
	}
}

AimWeapon3(Func_Var_1, Func_Var_2)
{
	turn hatch5 to x-axis <-90.000000> speed <180.000000>;
	wait-for-turn hatch5 around x-axis;
	return (1);
}

FireWeapon3()
{
	sleep 1300;
	turn hatch5 to x-axis <0.000000> speed <35.005495>;
	sleep 3000;
}

AimFromWeapon3(piecenum)
{
	piecenum = hole5;
}

QueryWeapon3(piecenum)
{
	piecenum = hole5;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

QueryLandingPadCount(Func_Var_1)
{
	Func_Var_1 = 9;
	return (Func_Var_1);
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4, Func_Var_5, Func_Var_6, Func_Var_7, Func_Var_8, Func_Var_9)
{
	Func_Var_1 = 6;
	Func_Var_2 = 7;
	Func_Var_3 = 8;
	Func_Var_4 = 9;
	Func_Var_5 = 10;
	Func_Var_6 = 11;
	Func_Var_7 = 12;
	Func_Var_8 = 13;
	Func_Var_9 = 14;
}

Killed(severity, corpsetype)
{
}
