#define TAK			// This is a TA script

#include "constants.h"

piece  flare1, flare2, base, wing1, wing2, rearthrust, wingthrust1, wingthrust2, thrust1, thrust2, predrop, drop, x, z,
		emit1, emit2, emit3, emit4;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, firing, fire_0, fire_1, fire_2, fire_3, fire_4;

#define SYMBOL_ANGLE_BAR	<80>
#define SYMBOL_ANGLE_WIDE	<60>
#define SYMBOL_ANGLE_THIN	<72>
#define SYMBOL_OMEGA_WIDE	<30>
#define SYMBOL_OMEGA_THIN	<36>

//fakeupright
#define FAKE_UPRIGHT_TARGET_PARENT	predrop
#define FAKE_UPRIGHT_TARGET_CHILD	drop	//piece to make upright
#define FAKE_UPRIGHT_REFERENCE		base	
#define FAKE_UPRIGHT_X				x	
#define FAKE_UPRIGHT_Z				z	

#include "fakeupright.h"

Sounds()
{
	play-sound("weapons/lasrmas1", 10);
	play-sound("weapons/build2", 10);
}

activatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [0.000000] now;
		move wing1 to x-axis [-2.400000] speed [1.646088];
		move wing1 to z-axis [0.000000] now;
		move wing1 to z-axis [-0.500000] speed [0.342926];
		move wing2 to x-axis [0.000000] now;
		move wing2 to x-axis [2.449994] speed [1.680377];
		move wing2 to z-axis [0.000000] now;
		move wing2 to z-axis [-0.550000] speed [0.377228];
		turn wing1 to z-axis <0.000000> now;
		turn wing1 to z-axis <0.890110> speed <0.615385>;
		turn wing2 to z-axis <0.000000> now;
		turn wing2 to z-axis <-2.692308> speed <1.846154>;
		sleep 1458;
	}
	sleep 66;
}

deactivatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [-2.400000] now;
		move wing1 to x-axis [0.000000] speed [1.646088];
		move wing1 to z-axis [-0.500000] now;
		move wing1 to z-axis [0.000000] speed [0.342926];
		move wing2 to x-axis [2.449994] now;
		move wing2 to x-axis [0.000000] speed [1.680377];
		move wing2 to z-axis [-0.550000] now;
		move wing2 to z-axis [0.000000] speed [0.377228];
		turn wing1 to z-axis <0.890110> now;
		turn wing1 to z-axis <0.000000> speed <0.615385>;
		turn wing2 to z-axis <-2.692308> now;
		turn wing2 to z-axis <0.000000> speed <1.846154>;
		sleep 1458;
	}
	sleep 66;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.049451> speed <120.027473>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.027473> speed <180.038462>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.027473>;
		Static_Var_1 = 0;
	}
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	hide rearthrust;
	hide wingthrust1;
	hide wingthrust2;
	hide flare1;
	hide flare2;
	hide predrop;
	hide drop;
	call-script FakeUprightInit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	return (1);
}

FireLoop(){
while( firing ){
	call-script FakeUprightTurn();
	if (fire_0) {
		emit-sfx 2049 from drop;
	}
	if (fire_1) {
		emit-sfx 2050 from emit1;
	}
	if (fire_2) {
		emit-sfx 2050 from emit2;
	}
	if (fire_3) {
		emit-sfx 2050 from emit3;
	}
	if (fire_4) {
		emit-sfx 2050 from emit4;
	}
  	sleep 25; // fire density
  }
}

FireTiming(){
	fire_0 = 0;
	fire_1 = 0;
	fire_2 = 0;
	fire_3 = 0;
	fire_4 = 0;
	turn emit1 to y-axis <-90> now;
	turn emit2 to y-axis <-90> now;
	turn emit3 to y-axis <90> now;
	turn emit4 to y-axis <90> now;
	sleep 800;
	GET PLAY_SOUND (1, 655360);
	fire_1 = 1;
	fire_3 = 1;
	turn emit1 to x-axis SYMBOL_ANGLE_BAR now;
	turn emit3 to x-axis SYMBOL_ANGLE_BAR now;
	sleep 833;
	turn emit1 to x-axis SYMBOL_ANGLE_WIDE speed SYMBOL_OMEGA_WIDE;
	turn emit3 to x-axis SYMBOL_ANGLE_WIDE speed SYMBOL_OMEGA_WIDE;
	sleep 167;
	fire_0 = 1;
	fire_2 = 1;
	fire_4 = 1;	
	turn emit2 to x-axis <90> now;
	turn emit4 to x-axis <90> now;
	turn emit2 to x-axis SYMBOL_ANGLE_THIN speed SYMBOL_OMEGA_THIN;
	turn emit4 to x-axis SYMBOL_ANGLE_THIN speed SYMBOL_OMEGA_THIN;
	sleep 400;
	fire_3 = 0;
	GET PLAY_SOUND (0, 655360);
	sleep 100;
	turn emit1 to x-axis SYMBOL_ANGLE_BAR speed SYMBOL_OMEGA_WIDE;
	turn emit3 to x-axis SYMBOL_ANGLE_BAR speed SYMBOL_OMEGA_WIDE;
	turn emit2 to x-axis <90> speed SYMBOL_OMEGA_THIN;
	turn emit4 to x-axis <90> speed SYMBOL_OMEGA_THIN;
	sleep 100;
	fire_3 = 1;
	sleep 400;
	fire_0 = 0;
	fire_2 = 0;
	fire_4 = 0;
	sleep 1000;
	fire_1 = 0;
	fire_3 = 0;
	firing = 0;
}

FirePrimary()
{
	firing = 1;
	start-script FireLoop();
	start-script FireTiming();
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimSecondary(heading, pitch)
{
	return (0);
}

FireSecondary()
{
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP2;
		explode flare2 type BITMAPONLY | BITMAP3;
		explode rearthrust type BITMAPONLY | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wingthrust1 type BITMAPONLY | BITMAP1;
		explode wing2 type BITMAPONLY | BITMAP2;
		explode wingthrust2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP2;
		explode flare2 type FALL | BITMAP3;
		explode rearthrust type FALL | BITMAP4;
		explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode wingthrust1 type FALL | BITMAP1;
		explode wing2 type BITMAPONLY | BITMAP2;
		explode wingthrust2 type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rearthrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wing1 type SHATTER | BITMAP5;
		explode wingthrust1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wing2 type BITMAPONLY | BITMAP2;
		explode wingthrust2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 1;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rearthrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wingthrust1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wing2 type BITMAPONLY | BITMAP2;
	explode wingthrust2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
