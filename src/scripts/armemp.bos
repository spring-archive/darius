#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, launch, Door1, Door2, Frame1, Frame2, Frame3, Frame4,
       Cover2, Cover1, dummy;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		move Door1 to x-axis [0.000000] now;
		move Door1 to x-axis [2.900000] speed [2.807355];
		move Door2 to x-axis [0.000000] now;
		move Door2 to x-axis [-2.900000] speed [2.807355];
		sleep 1033;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [1.400000] speed [1.351349];
		move Frame2 to x-axis [1.400000] speed [1.351349];
		move Frame3 to x-axis [-1.400000] speed [1.351349];
		move Frame4 to x-axis [-1.400000] speed [1.351349];
		sleep 1036;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [4.500000] speed [2.998065];
		move Frame2 to x-axis [4.500000] speed [2.998065];
		move Frame3 to x-axis [-4.500000] speed [2.998065];
		move Frame4 to x-axis [-4.500000] speed [2.998059];
		move Cover2 to x-axis [-1.500000] speed [1.450671];
		move Cover1 to x-axis [1.500000] speed [1.450671];
		turn Cover2 to z-axis <-75.252747> speed <72.774725>;
		turn Cover1 to z-axis <75.252747> speed <72.774725>;
		sleep 1034;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [5.800000] speed [1.254828];
		move Frame2 to x-axis [5.800000] speed [1.254822];
		move Frame3 to x-axis [-5.800000] speed [1.254822];
		move Frame4 to x-axis [-5.800000] speed [1.254822];
		move Cover2 to x-axis [-3.000000] speed [1.447876];
		move Cover1 to x-axis [3.000000] speed [1.447876];
		turn Cover2 to z-axis <-90.021978> speed <14.252747>;
		turn Cover1 to z-axis <90.021978> speed <14.252747>;
		sleep 1036;
	}
	sleep 22;
}

deactivatescr()
{
	if( TRUE )
	{
		move Door1 to x-axis [2.900000] now;
		move Door2 to x-axis [-2.900000] now;
		move Frame1 to x-axis [5.800000] now;
		move Frame1 to x-axis [4.500000] speed [2.141681];
		move Frame2 to x-axis [5.800000] now;
		move Frame2 to x-axis [4.500000] speed [2.141681];
		move Frame3 to x-axis [-5.800000] now;
		move Frame3 to x-axis [-4.500000] speed [2.141675];
		move Frame4 to x-axis [-5.800000] now;
		move Frame4 to x-axis [-4.500000] speed [2.141681];
		move Cover2 to x-axis [-3.000000] now;
		move Cover2 to x-axis [-1.500000] speed [2.471167];
		move Cover1 to x-axis [3.000000] now;
		move Cover1 to x-axis [1.500000] speed [2.471167];
		turn Cover2 to z-axis <-90.021978> now;
		turn Cover2 to z-axis <-75.252747> speed <24.329670>;
		turn Cover1 to z-axis <90.021978> now;
		turn Cover1 to z-axis <75.252747> speed <24.329670>;
		sleep 607;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [1.400000] speed [5.048859];
		move Frame2 to x-axis [1.400000] speed [5.048859];
		move Frame3 to x-axis [-1.400000] speed [5.048859];
		move Frame4 to x-axis [-1.400000] speed [5.048859];
		move Cover2 to x-axis [0.000000] speed [2.442993];
		move Cover1 to x-axis [0.000000] speed [2.442993];
		turn Cover2 to z-axis <0.000000> speed <122.560440>;
		turn Cover1 to z-axis <0.000000> speed <122.560440>;
		sleep 614;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [0.000000] speed [2.295081];
		move Frame2 to x-axis [0.000000] speed [2.295081];
		move Frame3 to x-axis [0.000000] speed [2.295081];
		move Frame4 to x-axis [0.000000] speed [2.295081];
		sleep 610;
	}
	if( TRUE )
	{
		move Door1 to x-axis [0.000000] speed [4.738556];
		move Door2 to x-axis [0.000000] speed [4.738556];
		sleep 612;
	}
	sleep 17;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	gun_1 = launch;
}

Stop()
{
	gun_1 = base;
	sleep 4000;
	call-script deactivatescr();
	show dummy;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = base;
	dont-shade base;
	dont-shade Door1;
	dont-shade Door2;
	dont-shade dummy;
	dont-shade Frame1;
	dont-shade Frame2;
	dont-shade Frame3;
	dont-shade Frame4;
	dont-shade Cover1;
	dont-shade Cover2;
	dont-cache Door1;
	dont-cache Door2;
	dont-cache dummy;
	dont-cache Frame1;
	dont-cache Frame2;
	dont-cache Frame3;
	dont-cache Frame4;
	dont-cache Cover1;
	dont-cache Cover2;
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide dummy;
	gun_1 = base;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = launch;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode Door1 type BITMAPONLY | BITMAP2;
		explode Door2 type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		explode Frame1 type BITMAPONLY | BITMAP5;
		explode Frame2 type BITMAPONLY | BITMAP1;
		explode Frame3 type BITMAPONLY | BITMAP2;
		explode Frame4 type BITMAPONLY | BITMAP3;
		explode Cover1 type BITMAPONLY | BITMAP4;
		explode Cover2 type BITMAPONLY | BITMAP5;
		explode launch type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode Door1 type BITMAPONLY | BITMAP2;
		explode Door2 type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		explode Frame1 type BITMAPONLY | BITMAP5;
		explode Frame2 type BITMAPONLY | BITMAP1;
		explode Frame3 type BITMAPONLY | BITMAP2;
		explode Frame4 type SHATTER | BITMAP3;
		explode Cover1 type FALL | BITMAP4;
		explode Cover2 type FALL | BITMAP5;
		explode launch type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode Door1 type BITMAPONLY | BITMAP2;
		explode Door2 type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		explode Frame1 type BITMAPONLY | BITMAP5;
		explode Frame2 type BITMAPONLY | BITMAP1;
		explode Frame3 type BITMAPONLY | BITMAP2;
		explode Frame4 type SHATTER | BITMAP3;
		explode Cover1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Cover2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode Door1 type BITMAPONLY | BITMAP2;
	explode Door2 type BITMAPONLY | BITMAP3;
	explode dummy type BITMAPONLY | BITMAP4;
	explode Frame1 type BITMAPONLY | BITMAP5;
	explode Frame2 type BITMAPONLY | BITMAP1;
	explode Frame3 type BITMAPONLY | BITMAP2;
	explode Frame4 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode Cover1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Cover2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
