#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fan, pipes, dome, post, globe, door1, door2,
       door3, door4, steam1, steam2;

static-var  statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

OpenDoors()
{
	turn door1 to z-axis <90.021978> speed <75.000000>;
	turn door2 to x-axis <-90.021978> speed <75.000000>;
	turn door3 to z-axis <-90.021978> speed <75.000000>;
	turn door4 to x-axis <90.021978> speed <75.000000>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around x-axis;
	wait-for-turn door3 around z-axis;
	wait-for-turn door4 around x-axis;
}

CloseDoors()
{
	turn door1 to z-axis <0.000000> speed <75.000000>;
	turn door2 to x-axis <0.000000> speed <75.000000>;
	turn door3 to z-axis <0.000000> speed <75.000000>;
	turn door4 to x-axis <0.000000> speed <75.000000>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around x-axis;
	wait-for-turn door3 around z-axis;
	wait-for-turn door4 around x-axis;
}

SteamVents()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 257 from steam1;
		emit-sfx 257 from steam2;
		sleep 500;
	}
}

Go()
{
	set ARMORED to 0;
	start-script SteamVents();
	move dome to y-axis [8.000000] speed [5.000000];
	call-script OpenDoors();
	wait-for-move dome along y-axis;
	move post to y-axis [5.000000] speed [4.000000];
	turn post to y-axis <60.010989> speed <55.000000>;
	wait-for-move post along y-axis;
	wait-for-turn post around y-axis;
	dont-cache globe;
}

Stop()
{
	cache globe;
	move post to y-axis [0.000000] speed [4.000000];
	turn post to y-axis <0.000000> speed <55.000000>;
	wait-for-move post along y-axis;
	call-script CloseDoors();
	move dome to y-axis [0.000000] speed [7.000000];
	signal 2;
	set ARMORED to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade globe;
	dont-cache post;
	dont-shade post;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	spin fan around y-axis speed <-250.060440>;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(0);
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode fan type BITMAPONLY | BITMAP2;
		explode pipes type BITMAPONLY | BITMAP1;
		explode dome type BITMAPONLY | BITMAP2;
		explode post type BITMAPONLY | BITMAP1;
		explode globe type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP1;
		explode door4 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode fan type FALL | BITMAP2;
		explode pipes type BITMAPONLY | BITMAP3;
		explode dome type BITMAPONLY | BITMAP2;
		explode post type BITMAPONLY | BITMAP1;
		explode globe type BITMAPONLY | BITMAP3;
		explode door1 type FALL | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP3;
		explode door4 type FALL | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP4;
		explode fan type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pipes type BITMAPONLY | BITMAP3;
		explode dome type BITMAPONLY | BITMAP2;
		explode post type BITMAPONLY | BITMAP1;
		explode globe type FALL | BITMAP3;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door4 type FALL | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP4;
	explode fan type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pipes type BITMAPONLY | BITMAP3;
	explode dome type BITMAPONLY | BITMAP2;
	explode post type BITMAPONLY | BITMAP1;
	explode globe type FALL | BITMAP3;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type BITMAPONLY | BITMAP2;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4 type FALL | BITMAP2;
}
