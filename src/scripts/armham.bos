piece base, waist, dish, torso, center, sidecenter, barrel, flare, lthigh, lknee, lshin, lankle, lheel, ltoe, rthigh, rknee, rshin, rankle, rheel,rtoe;

static-var isMoving, isAiming,shooting_num;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			16

#include "sfxtype.h"
#include "exptype.h"

DamageControl()
{
	while (get BUILD_PERCENT_LEFT) {
		sleep 1000;
	}
	var health;
	while (TRUE)
	{
		health = get HEALTH;
		if (health < 50)
		{
			emit-sfx SFXTYPE_WHITESMOKE from waist;
			if (health < 25)
			{	
				emit-sfx SFXTYPE_BLACKSMOKE from torso;
			}
		}
		sleep 1000;
	}
}

walk()
{
	turn rthigh 	to y-axis <0> 		speed <135>;
	turn lthigh 	to y-axis <0> 		speed <130>;
	
	turn rthigh 	to z-axis <0> 		speed <135>;
	turn lthigh 	to z-axis <0> 		speed <130>;
	turn lankle 	to z-axis <0> 		speed <130>;
	turn rankle 	to z-axis <0> 		speed <130>;

			
		if (isMoving)
		{
			Turn rshin to x-axis <85> speed<210>;	
			Turn rthigh to x-axis <-100> speed<135>;
			Turn lthigh to x-axis <30> speed<135>;
			Turn torso to y-axis <20> speed <45>;	
			wait-for-move waist along y-axis;		
			move waist to y-axis [1.2] speed <4200>;
			wait-for-move waist along y-axis;
			turn rshin to x-axis <10> speed <315>;
			move waist to y-axis [0] speed <4200>;
		}		
		if (isMoving)
		{
			Turn lshin to x-axis <85> speed<210>;
			Turn lthigh to x-axis <-100> speed<135>;
			turn rthigh to x-axis <30> speed <135>;
			Turn torso to y-axis <-20> speed <45>;
			wait-for-move waist along y-axis;
			move waist to y-axis [1.2] speed <4200>;	
			wait-for-move waist along y-axis;
			turn lshin to x-axis <10> speed <315>;
			move waist to y-axis [0] speed <4200>;
		}
	turn torso 	to z-axis <0> 		speed <135>;
}


shootwalk()
{
	turn rthigh 	to y-axis <0> 		speed <70>;
	turn lthigh 	to y-axis <0> 		speed <60>;
	
	turn rthigh 	to z-axis <0> 		speed <70>;
	turn lthigh 	to z-axis <0> 		speed <60>;
	turn lankle 	to z-axis <0> 		speed <60>;
	turn rankle 	to z-axis <0> 		speed <60>;
		
	if (isMoving)
		{
			Turn rshin to x-axis <85> speed<210>;	
			Turn rthigh to x-axis <-100> speed<135>;
			Turn lthigh to x-axis <30> speed<135>;
			wait-for-move waist along y-axis;		
			move waist to y-axis [1.2] speed <4200>;
			wait-for-move waist along y-axis;
			turn rshin to x-axis <10> speed <315>;
			move waist to y-axis [0] speed <4200>;
		}		
			if (isMoving)
		{
			Turn lshin to x-axis <85> speed<210>;
			Turn lthigh to x-axis <-100> speed<135>;
			turn rthigh to x-axis <30> speed <135>;
			wait-for-move waist along y-axis;
			move waist to y-axis [1.2] speed <4200>;	
			wait-for-move waist along y-axis;
			turn lshin to x-axis <10> speed <315>;
			move waist to y-axis [0] speed <4200>;
		}
}

stopwalk ()
{
	
	turn lankle		to x-axis <0> 		speed <395>;
	turn rankle		to x-axis <0> 		speed <395>;
	turn rthigh 	to x-axis <0> 		speed <235>;
	turn lthigh 	to x-axis <0> 		speed <230>;
	turn lshin  	to x-axis <0> 		speed <235>;
	turn rshin 	to x-axis <0> 		speed <230>;
	
	turn rthigh 	to y-axis <0> 	speed <135>;
	turn lthigh 	to y-axis <0> 		speed <130>;
	
	turn rthigh 	to z-axis <3> 		speed <135>;
	turn lthigh 	to z-axis <-3> 		speed <130>;
	turn lankle 	to z-axis <3> 		speed <130>;
	turn rankle 	to z-axis <-3>		speed <130>;
}



StartMoving()
{
	isMoving = TRUE;
}

StopMoving()
{
	isMoving = FALSE;
}

MotionControl()
{
	while ( TRUE )
	{              
		IF (isMoving)
		{
			IF (isAiming)
			{
				CALL-SCRIPT shootwalk();
			}
                else
			{
				CALL-SCRIPT walk();
			}
		}
		else
		{
			CALL-SCRIPT stopwalk();
			sleep 120; 
		}
	}
} 
	
Create()
{
	isMoving = FALSE;
	isAiming = FALSE;
	shooting_num=1;
	hide flare;
	start-script MotionControl();	
	start-script DamageControl();
}
	
SweetSpot(piecenum)
{
	piecenum=torso;
}	
	
AimFromPrimary(piecenum)
{
	piecenum=center;
}

QueryPrimary(piecenum)
{
	piecenum=flare;
}

AimFromScondary(piecenum)
{
	piecenum=sidecenter;
}

RestoreAfterDelay()
{
	sleep 1000;
	turn dish 		to y-axis <0> speed <235>;
	turn torso 		to x-axis <0> speed <235>;
	isAiming = FALSE;
}

AimPrimary(heading,pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	isAiming = TRUE;
	
	turn dish to y-axis heading speed <250>;
	turn torso to x-axis 0 - pitch speed <200>;
	
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();

	return(TRUE);
}
	
Shot1(unknown)
{
	sleep 1;
	turn torso to y-axis <20> speed <500>; 
	move barrel to z-axis [-2.5] speed <10000>;
	wait-for-turn torso around y-axis;
	wait-for-move barrel along z-axis;
	sleep 500;
	turn torso to y-axis <0> speed <60>; 
	sleep 300;
	move barrel to z-axis [0] speed <800>;
}
	

Killed( severity, corpsetype )
{
	if (severity <= 25)
	{
		corpsetype = 1;
		explode waist type		SHATTER;
		explode torso type		SHATTER;
		return( 0 );
	}

	if (severity <= 50)
	{
		corpsetype = 2;
		explode waist type		SHATTER;
		explode torso type		SHATTER;
		explode barrel type		FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return( 0 );
	}

	corpsetype = 3;
	explode waist type		SHATTER;
	explode torso type		SHATTER;
	explode rankle type	SHATTER;
	explode barrel type	SHATTER;
	explode lshin type	FALL |  FIRE | BITMAP2;
	explode lthigh type		FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	
	return( 0 );
}