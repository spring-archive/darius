
#include "constants.h"

piece 	base, turret, gun, wheels1, wheels2, wheels3, wheels4, flare;

static-var  restore_delay, currspeed, spinspeed, bMoving, randturn1, randturn2, randturn3, randturn4;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

SpinWheels()
{
	while( TRUE )
	{
		currspeed = get CURRENT_SPEED;
		
		if( !bMoving )
		{
			stop-spin wheels1 around x-axis;
			stop-spin wheels2 around x-axis;
			stop-spin wheels3 around x-axis;
			stop-spin wheels4 around x-axis;			
			sleep 30;	
		}
		
		if( bMoving )
		{
			if( currspeed <= [0.5] )
			{
				spinspeed = <114>;
				spin wheels1 around x-axis speed spinspeed;
				spin wheels2 around x-axis speed spinspeed;
				spin wheels3 around x-axis speed spinspeed;
				spin wheels4 around x-axis speed spinspeed;				
				sleep 30;
			}
			if( [0.5] < currspeed <= [1] )
			{
				spinspeed = <229>;
				spin wheels1 around x-axis speed spinspeed;
				spin wheels2 around x-axis speed spinspeed;
				spin wheels3 around x-axis speed spinspeed;
				spin wheels4 around x-axis speed spinspeed;	
				sleep 30;
			}
			if( currspeed > [1])
			{
				spinspeed = currspeed / [1.57] * <360>;
				spin wheels1 around x-axis speed spinspeed;
				spin wheels2 around x-axis speed spinspeed;
				spin wheels3 around x-axis speed spinspeed;
				spin wheels4 around x-axis speed spinspeed;	
				sleep 30;
			}
		}
	}
}

StartMoving()
{
	bMoving = 1;
}

StopMoving()
{
	bMoving = 0;
}

Create()
{
	hide flare;
	restore_delay = 3000;

	randturn1 = rand( 0, 90 );
	randturn2 = rand( 90, 180 );
	randturn3 = rand( 180, 240 );
	randturn4 = rand( 240, 360 );
	
	turn wheels1 to x-axis randturn1 * <1> now;
	turn wheels2 to x-axis randturn2 * <1> now;
	turn wheels3 to x-axis randturn3 * <1> now;
	turn wheels4 to x-axis randturn4 * <1> now;
	start-script SpinWheels();
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <10>;
	turn gun to x-axis <0.000000> speed <5>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <70>;
	turn gun to x-axis <0.000000> - pitch speed <60>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
		
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode gun type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode gun type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode wheels1 type FALL | BITMAP3;
		explode wheels2 type FALL | BITMAP3;
		explode wheels3 type FALL | BITMAP3;
		explode wheels4 type FALL | BITMAP3;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode wheels1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode wheels2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode wheels3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode wheels4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode wheels1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode wheels2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode wheels3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode wheels4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
