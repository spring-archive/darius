#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


piece  base, body, ruparm, Rarm, rhand, Rweapon, Raim1, Rbarr1,
       Rbflare1, Raim2, Rbarr2, Rbflare2, Raim3, Rbarr3, Rbflare3, luparm,
       Larm, lhand, Lweapon, Laim1, Lbarr1, Lbflare1, Laim2, Lbarr2,
       Lbflare2, Laim3, Lbarr3, Lbflare3, launcher, Rmissflare, Lmissflare, pelvis,
       Rhileg, Rleg, Rdownleg, Rfoot, Rbackfing, Rfinger, Rfinger1, Rfinger2,
       Lhileg, Lleg, Ldownleg, Lfoot, Lbackfing, Lfinger, Lfinger1, Lfinger2,
       head, Raim, Rbarrl, Rheadflare, Laim, Lbarrl, Lheadflare, luparmhold,
       ruparmhold, shld1, shld2, shld3, shld4, shld5, shld6, ovrshld,
       Lweapglo, Rweapglo;

static-var  gun_1, gun_2, gun_3, bMoving, bAiming,
            Static_Var_6, Static_Var_8, Static_Var_9,
            Static_Var_11, Static_Var_15,
            bAiming2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

#define RECOIL_DISTANCE_1_BARR	[-6]
#define RECOIL_DISTANCE_1_AIM	[-3]
#define RECOIL_DISTANCE_1_WEAP	[-2]
#define RECOIL_RESTORE_1_BARR	[2]
#define RECOIL_RESTORE_1_AIM	[1]
#define RECOIL_RESTORE_1_WEAP	[2]


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4, randSmoke, randShield;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		randSmoke = Rand( 1, 4 );
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			if( randSmoke == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( randSmoke == 2 )
			{
				emit-sfx smoketype from Rarm;
			}
			if( randSmoke == 3 )
			{
				emit-sfx smoketype from Rfoot;
			}
			if( randSmoke == 1 )
			{
				emit-sfx smoketype from Lweapon;
			}
		}
		if( !Static_Var_9 )
		{
			if( healthpercent > 20 )
			{
				Static_Var_9 = 1;
				randShield = Rand( 1, 3 );
				spin shld1 around y-axis speed <700.000000>;
				spin shld2 around y-axis speed <-600.000000>;
				spin shld3 around y-axis speed <1100.000000>;
				spin shld4 around y-axis speed <-900.000000>;
				spin shld5 around y-axis speed <800.000000>;
				spin shld6 around y-axis speed <-500.000000>;
				spin ovrshld around x-axis speed <800.000000>;
				if( randShield == 1 )
				{
					show shld1;
					show shld6;
					sleep 30;
					show shld2;
					show shld5;
					sleep 30;
					show shld3;
					show shld4;
					sleep 40;
					show ovrshld;
					sleep 100;
					hide ovrshld;
					sleep 30;
					hide shld1;
					hide shld6;
					sleep 30;
					hide shld2;
					hide shld5;
					sleep 30;
					hide shld3;
					hide shld4;
				}
				if( randShield == 2 )
				{
					show shld1;
					show shld2;
					show shld3;
					show shld4;
					show shld5;
					show shld6;
					show ovrshld;
					sleep 180;
					hide shld1;
					hide shld2;
					hide shld3;
					hide shld4;
					hide shld5;
					hide shld6;
					hide ovrshld;
					sleep 140;
					show shld1;
					show shld2;
					show shld3;
					show shld4;
					show shld5;
					show shld6;
					show ovrshld;
					sleep 140;
					hide shld1;
					hide shld2;
					hide shld3;
					hide shld4;
					hide shld5;
					hide shld6;
					hide ovrshld;
					sleep 100;
					show shld1;
					show shld2;
					show shld3;
					show shld4;
					show shld5;
					show shld6;
					show ovrshld;
					sleep 150;
					hide shld1;
					hide shld2;
					hide shld3;
					hide shld4;
					hide shld5;
					hide shld6;
					hide ovrshld;
				}
				if( randShield == 3 )
				{
					show shld3;
					show shld2;
					sleep 10;
					show shld5;
					show shld2;
					hide shld3;
					hide shld4;
					sleep 10;
					show shld1;
					show shld6;
					sleep 14;
					hide shld2;
					hide shld5;
					show shld3;
					show shld4;
					sleep 8;
					show shld2;
					show shld5;
					hide shld1;
					hide shld6;
					sleep 10;
					show shld3;
					show shld4;
					hide shld2;
					hide shld5;
					sleep 10;
					show shld2;
					show shld5;
					sleep 6;
					hide shld3;
					hide shld4;
					sleep 10;
					show shld1;
					show shld6;
					sleep 6;
					hide shld2;
					hide shld5;
					show shld3;
					show shld4;
					sleep 10;
					show shld2;
					show shld5;
					hide shld1;
					hide shld6;
					sleep 8;
					hide shld3;
					hide shld4;
					sleep 10;
					show shld1;
					show shld6;
					sleep 8;
					show shld3;
					show shld4;
					sleep 10;
					show shld2;
					show shld5;
					hide shld3;
					hide shld4;
					sleep 10;
					hide shld1;
					hide shld6;
					show shld3;
					show shld4;
					sleep 6;
					hide shld2;
					hide shld5;
					sleep 10;
					show shld3;
					show shld4;
					sleep 8;
					show shld2;
					show shld5;
					hide shld3;
					hide shld4;
					sleep 10;
					hide shld2;
					hide shld5;
				}
			}
		}
		if( Static_Var_9 )
		{
			if( !Static_Var_11 )
			{
				Static_Var_8 = Rand( 1, 35 );
			}
			Static_Var_11 = 0;
			if( Static_Var_8 == 1 )
			{
				show shld1;
				sleep 130;
				show shld2;
				hide shld1;
				sleep 130;
				show shld3;
				hide shld2;
				sleep 130;
				show shld4;
				hide shld3;
				sleep 130;
				show shld5;
				hide shld4;
				sleep 130;
				if( healthpercent < 40 )
				{
					smoketype = 256 | 2;
					if( Rand( 1, 66 ) < healthpercent )
					{
						smoketype = 256 | 1;
					}
					if( randSmoke == 1 )
					{
						emit-sfx smoketype from base;
					}
					if( randSmoke == 2 )
					{
						emit-sfx smoketype from Rarm;
					}
					if( randSmoke == 3 )
					{
						emit-sfx smoketype from Rfoot;
					}
					if( randSmoke == 1 )
					{
						emit-sfx smoketype from Lweapon;
					}
				}
				show shld6;
				hide shld5;
				sleep 130;
				show shld5;
				hide shld6;
				sleep 130;
				show shld4;
				hide shld5;
				sleep 130;
				show shld3;
				hide shld4;
				sleep 130;
				show shld2;
				hide shld3;
				sleep 130;
				randSmoke = Rand( 1, 4 );
				if( healthpercent < 35 )
				{
					smoketype = 256 | 2;
					if( Rand( 1, 66 ) < healthpercent )
					{
						smoketype = 256 | 1;
					}
					if( randSmoke == 1 )
					{
						emit-sfx smoketype from base;
					}
					if( randSmoke == 2 )
					{
						emit-sfx smoketype from Rarm;
					}
					if( randSmoke == 3 )
					{
						emit-sfx smoketype from Rfoot;
					}
					if( randSmoke == 1 )
					{
						emit-sfx smoketype from Lweapon;
					}
				}
				show shld1;
				hide shld2;
				sleep 130;
				show shld2;
				hide shld1;
				sleep 130;
				show shld3;
				hide shld2;
				sleep 130;
				if( healthpercent < 40 )
				{
					smoketype = 256 | 2;
					if( Rand( 1, 66 ) < healthpercent )
					{
						smoketype = 256 | 1;
					}
					if( randSmoke == 1 )
					{
						emit-sfx smoketype from base;
					}
					if( randSmoke == 2 )
					{
						emit-sfx smoketype from Rarm;
					}
					if( randSmoke == 3 )
					{
						emit-sfx smoketype from Rfoot;
					}
					if( randSmoke == 1 )
					{
						emit-sfx smoketype from Lweapon;
					}
				}
				show shld4;
				hide shld3;
				sleep 130;
				show shld5;
				hide shld4;
				sleep 130;
				show shld6;
				hide shld5;
				sleep 100;
				hide shld6;
				if( Static_Var_8 == 2 )
				{
					show shld1;
					sleep 200;
					show shld2;
					sleep 200;
					show shld3;
					sleep 200;
					show shld4;
					if( healthpercent < 40 )
					{
						smoketype = 256 | 2;
						if( Rand( 1, 66 ) < healthpercent )
						{
							smoketype = 256 | 1;
						}
						if( randSmoke == 1 )
						{
							emit-sfx smoketype from base;
						}
						if( randSmoke == 2 )
						{
							emit-sfx smoketype from Rarm;
						}
						if( randSmoke == 3 )
						{
							emit-sfx smoketype from Rfoot;
						}
						if( randSmoke == 1 )
						{
							emit-sfx smoketype from Lweapon;
						}
					}
					sleep 200;
					show shld5;
					sleep 200;
					show shld6;
					sleep 320;
					show ovrshld;
					sleep 100;
					hide shld1;
					hide shld2;
					hide shld3;
					hide shld4;
					hide shld5;
					hide shld6;
					hide ovrshld;
				}
				if( Static_Var_8 == 3 )
				{
					show shld3;
					show shld4;
					sleep 200;
					hide shld3;
					hide shld4;
					show shld2;
					show shld5;
					sleep 200;
					if( healthpercent < 40 )
					{
						smoketype = 256 | 2;
						if( Rand( 1, 66 ) < healthpercent )
						{
							smoketype = 256 | 1;
						}
						if( randSmoke == 1 )
						{
							emit-sfx smoketype from base;
						}
						if( randSmoke == 2 )
						{
							emit-sfx smoketype from Rarm;
						}
						if( randSmoke == 3 )
						{
							emit-sfx smoketype from Rfoot;
						}
						if( randSmoke == 1 )
						{
							emit-sfx smoketype from Lweapon;
						}
					}
					hide shld2;
					hide shld5;
					show shld1;
					show shld6;
					sleep 200;
					hide shld1;
					hide shld6;
					show shld3;
					show shld4;
					sleep 80;
					hide shld3;
					hide shld4;
					sleep 70;
					show shld3;
					show shld4;
					sleep 60;
					hide shld3;
					hide shld4;
				}
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon()
{
	var health, randShield;
	signal 32;
	health = get HEALTH;
	if( Static_Var_9 )
	{
		if( health < 25 )
		{
			Static_Var_9 = 0;
			explode shld1 type SHATTER;
			explode shld2 type SHATTER;
			explode shld3 type SHATTER;
			explode shld4 type SHATTER;
			explode shld5 type SHATTER;
			explode shld6 type SHATTER;
			explode ovrshld type SHATTER;
			hide shld1;
			hide shld2;
			hide shld3;
			hide shld4;
			hide shld5;
			hide shld6;
			hide ovrshld;
			stop-spin shld1 around y-axis;
			stop-spin shld2 around y-axis;
			stop-spin shld3 around y-axis;
			stop-spin shld4 around y-axis;
			stop-spin shld5 around y-axis;
			stop-spin shld5 around y-axis;
			stop-spin ovrshld around x-axis;
			return (0);
		}
	}
	set-signal-mask 32;
	if( Static_Var_9 )
	{
		randShield = Rand( 1, 3 );
		if( randShield == 1 )
		{
			show shld1;
			show shld6;
			sleep 40;
			show shld2;
			show shld5;
			sleep 50;
			show shld3;
			show shld4;
			sleep 60;
			show ovrshld;
			sleep 70;
			hide shld1;
			hide shld6;
			sleep 40;
			hide ovrshld;
			hide shld2;
			hide shld5;
			sleep 50;
			hide shld3;
			hide shld4;
		}
		if( randShield == 2 )
		{
			show shld1;
			show shld2;
			show shld3;
			show shld4;
			show shld5;
			show shld6;
			sleep 40;
			show ovrshld;
			sleep 220;
			hide ovrshld;
			sleep 25;
			hide shld1;
			hide shld6;
			sleep 50;
			hide shld2;
			hide shld5;
			sleep 50;
			hide shld3;
			hide shld4;
		}
		if( randShield == 3 )
		{
			show ovrshld;
			sleep 70;
			show shld3;
			show shld4;
			sleep 110;
			hide ovrshld;
			sleep 160;
			show shld2;
			show shld5;
			hide shld3;
			hide shld4;
			sleep 320;
			show shld1;
			show shld6;
			hide shld2;
			hide shld5;
			sleep 320;
			hide shld1;
			hide shld6;
		}
	}
}

Walk()
{
	while( bMoving )
	{
		if( Static_Var_6 )
		{
			turn Rhileg to x-axis <-7.000000> speed <10.000000>;
			turn Rleg to x-axis <-28.000000> speed <28.000000>;
			turn Rdownleg to x-axis <15.000000> speed <15.000000>;
			turn Rfoot to x-axis <5.000000> speed <5.000000>;
			turn Rfinger to x-axis <40.000000> speed <50.000000>;
			turn Rfinger1 to x-axis <40.000000> speed <60.000000>;
			turn Rfinger2 to x-axis <40.000000> speed <60.000000>;
			turn Rbackfing to x-axis <-50.000000> speed <70.000000>;
		}
		if( !Static_Var_6 )
		{
			turn Rhileg to x-axis <-7.000000> speed <20.000000>;
			turn Rleg to x-axis <-28.000000> speed <48.000000>;
			turn Rdownleg to x-axis <15.000000> speed <21.000000>;
		}
		Static_Var_6 = 0;
		if( !bAiming )
		{
			turn luparm to x-axis <-6.000000> speed <16.000000>;
			turn lhand to y-axis <5.000000> speed <5.000000>;
			turn rhand to y-axis <0.000000> speed <12.000000>;
			turn Larm to x-axis <-10.000000> speed <10.000000>;
			turn ruparm to x-axis <6.000000> speed <8.000000>;
			turn Rarm to x-axis <9.000000> speed <12.000000>;
			turn body to y-axis <4.000000> speed <9.000000>;
			turn head to y-axis <3.000000> speed <7.000000>;
			turn body to z-axis <2.000000> speed <2.000000>;
			move body to y-axis [0.400000] speed [0.600000];
			move head to y-axis [0.600000] speed [0.750000];
		}
		turn Lhileg to x-axis <8.000000> speed <8.000000>;
		turn Lleg to x-axis <20.000000> speed <30.000000>;
		turn Ldownleg to x-axis <-5.000000> speed <15.000000>;
		turn Lfoot to x-axis <-15.000000> speed <15.000000>;
		turn Lfinger to x-axis <-13.000000> speed <13.000000>;
		turn Lfinger1 to x-axis <-13.000000> speed <13.000000>;
		turn Lfinger2 to x-axis <-13.000000> speed <13.000000>;
		turn Lbackfing to x-axis <-25.000000> speed <25.000000>;
		sleep 800;
		if( !bAiming )
		{
			turn lhand to y-axis <-15.000000> speed <15.000000>;
			turn Rarm to x-axis <10.000000> speed <30.000000>;
			move body to y-axis [0.000000] speed [0.300000];
			move head to y-axis [0.600000] speed [0.400000];
		}
		sleep 200;
		turn Rhileg to x-axis <0.000000> speed <14.000000>;
		turn Rleg to x-axis <-10.000000> speed <28.000000>;
		turn Rdownleg to x-axis <10.000000> speed <12.000000>;
		turn Rfoot to x-axis <0.000000> speed <5.000000>;
		turn Rfinger to x-axis <0.000000> speed <80.000000>;
		turn Rfinger1 to x-axis <0.000000> speed <80.000000>;
		turn Rfinger2 to x-axis <0.000000> speed <80.000000>;
		turn Rbackfing to x-axis <0.000000> speed <100.000000>;
		turn Lhileg to x-axis <10.000000> speed <4.000000>;
		turn Ldownleg to x-axis <10.000000> speed <30.000000>;
		turn Lfinger to x-axis <-18.000000> speed <16.659341>;
		turn Lfinger1 to x-axis <-18.000000> speed <16.659341>;
		turn Lfinger2 to x-axis <-18.000000> speed <16.659341>;
		turn Lbackfing to x-axis <-30.000000> speed <16.659341>;
		sleep 300;
		turn Lfinger to x-axis <40.000000> speed <80.000000>;
		turn Lfinger1 to x-axis <40.000000> speed <80.000000>;
		turn Lfinger2 to x-axis <40.000000> speed <80.000000>;
		turn Lbackfing to x-axis <-20.000000> speed <35.000000>;
		sleep 200;
		turn Lhileg to x-axis <-7.000000> speed <20.000000>;
		turn Lleg to x-axis <-28.000000> speed <48.000000>;
		turn Ldownleg to x-axis <15.000000> speed <21.000000>;
		turn Rhileg to x-axis <8.000000> speed <8.000000>;
		turn Rleg to x-axis <20.000000> speed <30.000000>;
		turn Rdownleg to x-axis <-5.000000> speed <15.000000>;
		turn Rfoot to x-axis <-15.000000> speed <15.000000>;
		turn Rfinger to x-axis <-13.000000> speed <13.000000>;
		turn Rfinger1 to x-axis <-13.000000> speed <13.000000>;
		turn Rfinger2 to x-axis <-13.000000> speed <13.000000>;
		turn Rbackfing to x-axis <-25.000000> speed <25.000000>;
		if( !bAiming )
		{
			turn ruparm to x-axis <-6.000000> speed <16.000000>;
			turn rhand to y-axis <5.000000> speed <5.000000>;
			turn lhand to y-axis <0.000000> speed <12.000000>;
			turn Rarm to x-axis <-10.000000> speed <10.000000>;
			turn luparm to x-axis <6.000000> speed <8.000000>;
			turn Larm to x-axis <9.000000> speed <12.000000>;
			turn body to y-axis <-4.000000> speed <9.000000>;
			turn head to y-axis <-3.000000> speed <7.000000>;
			turn body to z-axis <-2.000000> speed <2.000000>;
			move body to y-axis [0.400000] speed [0.600000];
			move head to y-axis [0.600000] speed [0.750000];
		}
		sleep 800;
		if( !bAiming )
		{
			turn rhand to y-axis <15.000000> speed <15.000000>;
			turn Larm to x-axis <10.000000> speed <30.000000>;
			move body to y-axis [0.000000] speed [0.300000];
			move head to y-axis [0.000000] speed [0.400000];
		}
		sleep 200;
		turn Lhileg to x-axis <0.000000> speed <14.000000>;
		turn Lleg to x-axis <-10.000000> speed <28.000000>;
		turn Ldownleg to x-axis <10.000000> speed <12.000000>;
		turn Lfoot to x-axis <0.000000> speed <5.000000>;
		turn Lfinger to x-axis <0.000000> speed <80.000000>;
		turn Lfinger1 to x-axis <0.000000> speed <80.000000>;
		turn Lfinger2 to x-axis <0.000000> speed <80.000000>;
		turn Lbackfing to x-axis <0.000000> speed <100.000000>;
		turn Rhileg to x-axis <10.000000> speed <4.000000>;
		turn Rdownleg to x-axis <10.000000> speed <30.000000>;
		turn Rfinger to x-axis <-18.000000> speed <16.659341>;
		turn Rfinger1 to x-axis <-18.000000> speed <16.659341>;
		turn Rfinger2 to x-axis <-18.000000> speed <16.659341>;
		turn Rbackfing to x-axis <-30.000000> speed <16.659341>;
		sleep 300;
		turn Rfinger to x-axis <40.000000> speed <80.000000>;
		turn Rfinger1 to x-axis <40.000000> speed <80.000000>;
		turn Rfinger2 to x-axis <40.000000> speed <80.000000>;
		turn Rbackfing to x-axis <-20.000000> speed <35.000000>;
		sleep 200;
	}
}

StartMoving()
{
	set-signal-mask 16;
	bMoving = TRUE;
	sleep 200;
	Static_Var_11 = 1;
	Static_Var_8 = Rand( 1, 6 );
	start-script Walk();
}

StopMoving()
{
	signal 16;
	bMoving = FALSE;
	Static_Var_6 = 1;
	turn Rhileg to x-axis <0.000000> speed <40.000000>;
	turn Rleg to x-axis <0.000000> speed <60.000000>;
	turn Rdownleg to x-axis <0.000000> speed <50.000000>;
	turn Rfoot to x-axis <0.000000> speed <35.000000>;
	turn Rfinger to x-axis <0.000000> speed <60.000000>;
	turn Rfinger1 to x-axis <0.000000> speed <60.000000>;
	turn Rfinger2 to x-axis <0.000000> speed <60.000000>;
	turn Rbackfing to x-axis <0.000000> speed <60.000000>;
	turn Lhileg to x-axis <0.000000> speed <40.000000>;
	turn Lleg to x-axis <0.000000> speed <60.000000>;
	turn Ldownleg to x-axis <0.000000> speed <50.000000>;
	turn Lfoot to x-axis <0.000000> speed <35.000000>;
	turn Lfinger to x-axis <0.000000> speed <60.000000>;
	turn Lfinger1 to x-axis <0.000000> speed <60.000000>;
	turn Lfinger2 to x-axis <0.000000> speed <60.000000>;
	turn Lbackfing to x-axis <0.000000> speed <60.000000>;
	move head to x-axis [0.000000] speed [5.000000];
	move body to x-axis [0.000000] speed [7.000000];
	turn body to z-axis <0.000000> speed <9002.192308>;
	move head to y-axis [0.000000] speed [1.000000];
	if( !bAiming )
	{
		turn body to y-axis <0.000000> speed <80.000000>;
		turn ruparm to x-axis <0.000000> speed <65.000000>;
		turn rhand to x-axis <0.000000> speed <60.000000>;
		turn head to y-axis <0.000000> speed <50.000000>;
		turn luparm to x-axis <0.000000> speed <65.000000>;
		turn lhand to x-axis <0.000000> speed <60.000000>;
		turn lhand to y-axis <0.000000> speed <50.000000>;
		turn rhand to y-axis <0.000000> speed <50.000000>;
		turn Rarm to y-axis <0.000000> speed <40.000000>;
		turn Larm to y-axis <0.000000> speed <40.000000>;
		turn Rarm to x-axis <0.000000> speed <30.000000>;
		turn Larm to x-axis <0.000000> speed <30.000000>;
	}
}

Create()
{
	set ARMORED to 1;
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = body;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_6 = 1;
	Static_Var_9 = 0;
	Static_Var_8 = 0;
	Static_Var_11 = 0;
	Static_Var_15 = 0;
	bAiming2 = 0;
	hide Rbflare1;
	hide Lbflare1;
	hide Rbflare2;
	hide Lbflare2;
	hide Rbflare3;
	hide Lbflare3;
	hide shld1;
	hide shld2;
	hide shld3;
	hide shld4;
	hide shld5;
	hide shld6;
	hide ovrshld;
	hide Lheadflare;
	hide Rheadflare;
	dont-cache shld1;
	dont-cache shld2;
	dont-cache shld3;
	dont-cache shld4;
	dont-cache shld5;
	dont-cache shld6;
	dont-cache ovrshld;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	dont-cache Lweapglo;
	dont-cache Rweapglo;
	start-script SmokeUnit();
	
}

RestoreAfterDelay()
{
	sleep 5000;
	turn body to y-axis <0.000000> speed <80.000000>;
	turn ruparm to x-axis <0.000000> speed <60.000000>;
	turn luparm to x-axis <0.000000> speed <60.000000>;
	turn lhand to y-axis <0.000000> speed <40.000000>;
	turn rhand to y-axis <0.000000> speed <40.000000>;
	turn ruparmhold to x-axis <0.000000> speed <60.000000>;
	turn luparmhold to x-axis <0.000000> speed <60.000000>;
	wait-for-turn body around y-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn lhand around y-axis;
	wait-for-turn ruparmhold around x-axis;
	Static_Var_15 = 0;
	if( !bAiming2 )
	{
		bAiming = FALSE;
	}
}

RestoreSecondary()
{
	sleep 11000;
	turn head to y-axis <0.000000> speed <80.000000>;
	wait-for-turn head around y-axis;
	bAiming2 = 0;
	if( !Static_Var_15 )
	{
		bAiming = FALSE;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = Rbflare1;
	} else if ( gun_1 == 2 ) {
		piecenum = Rbflare2;
	} else if ( gun_1 == 3 ) {
		piecenum = Rbflare3;
	} else if ( gun_1 == 4 ) {
		piecenum = Lbflare1;
	} else if ( gun_1 == 5 ) {
		piecenum = Lbflare2;
	} else {
		piecenum = Lbflare3;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = body;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	var gun_1_pitch;
	bAiming = TRUE;
	Static_Var_15 = 1;
	gun_1_pitch = 0 - pitch;
	turn body to y-axis heading speed <100.000000>;
	turn ruparmhold to x-axis <0.000000> - pitch speed <70.000000>;
	turn luparmhold to x-axis <0.000000> - pitch speed <70.000000>;
	if( gun_1_pitch <= -32768 )
	{
		turn rhand to y-axis gun_1_pitch speed <55.000000>;
		turn lhand to y-axis <0.000000> - gun_1_pitch speed <55.000000>;
	}
	if( gun_1_pitch > -32768 )
	{
		turn rhand to y-axis <0.000000> speed <55.000000>;
		turn lhand to y-axis <0.000000> speed <55.000000>;
	}
	wait-for-turn body around y-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn luparm around x-axis;
	wait-for-turn lhand around y-axis;
	wait-for-turn rhand around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	return (0);
}

Shot1() {
	++gun_1;
	if (gun_1 > 6) {
		gun_1 = 1;
	}
	if (gun_1 == 1) {
		move Rbarr1 to z-axis RECOIL_DISTANCE_1_BARR now;
		move Raim1 to z-axis RECOIL_DISTANCE_1_AIM now;
		move Rweapon to z-axis RECOIL_DISTANCE_1_WEAP now;
		move Rbarr1 to z-axis 0 speed RECOIL_RESTORE_1_BARR;
		move Raim1 to z-axis 0 speed RECOIL_RESTORE_1_AIM;
		move Rweapon to z-axis 0 speed RECOIL_RESTORE_1_WEAP;
	} else if (gun_1 == 2) {
		move Rbarr2 to z-axis RECOIL_DISTANCE_1_BARR now;
		move Raim2 to z-axis RECOIL_DISTANCE_1_AIM now;
		move Rweapon to z-axis RECOIL_DISTANCE_1_WEAP now;
		move Rbarr2 to z-axis 0 speed RECOIL_RESTORE_1_BARR;
		move Raim2 to z-axis 0 speed RECOIL_RESTORE_1_AIM;
		move Rweapon to z-axis 0 speed RECOIL_RESTORE_1_WEAP;
	} else if (gun_1 == 3) {
		move Rbarr3 to z-axis RECOIL_DISTANCE_1_BARR now;
		move Raim3 to z-axis RECOIL_DISTANCE_1_AIM now;
		move Rweapon to z-axis RECOIL_DISTANCE_1_WEAP now;
		move Rbarr3 to z-axis 0 speed RECOIL_RESTORE_1_BARR;
		move Raim3 to z-axis 0 speed RECOIL_RESTORE_1_AIM;
		move Rweapon to z-axis 0 speed RECOIL_RESTORE_1_WEAP;
	} else if (gun_1 == 4) {
		move Lbarr1 to z-axis RECOIL_DISTANCE_1_BARR now;
		move Laim1 to z-axis RECOIL_DISTANCE_1_AIM now;
		move Lweapon to z-axis RECOIL_DISTANCE_1_WEAP now;
		move Lbarr1 to z-axis 0 speed RECOIL_RESTORE_1_BARR;
		move Laim1 to z-axis 0 speed RECOIL_RESTORE_1_AIM;
		move Lweapon to z-axis 0 speed RECOIL_RESTORE_1_WEAP;
	} else if (gun_1 == 5) {
		move Lbarr2 to z-axis RECOIL_DISTANCE_1_BARR now;
		move Laim2 to z-axis RECOIL_DISTANCE_1_AIM now;
		move Lweapon to z-axis RECOIL_DISTANCE_1_WEAP now;
		move Lbarr2 to z-axis 0 speed RECOIL_RESTORE_1_BARR;
		move Laim2 to z-axis 0 speed RECOIL_RESTORE_1_AIM;
		move Lweapon to z-axis 0 speed RECOIL_RESTORE_1_WEAP;
	} else {
		move Lbarr3 to z-axis RECOIL_DISTANCE_1_BARR now;
		move Laim3 to z-axis RECOIL_DISTANCE_1_AIM now;
		move Lweapon to z-axis RECOIL_DISTANCE_1_WEAP now;
		move Lbarr3 to z-axis 0 speed RECOIL_RESTORE_1_BARR;
		move Laim3 to z-axis 0 speed RECOIL_RESTORE_1_AIM;
		move Lweapon to z-axis 0 speed RECOIL_RESTORE_1_WEAP;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 ) {
		piecenum = Rheadflare;
	} else {
		piecenum = Lheadflare;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = head;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	bAiming2 = 1;
	turn head to y-axis heading speed <110.000000>;
	wait-for-turn head around y-axis;
	start-script RestoreSecondary();
	return (1);
}

FireSecondary()
{
	gun_2 = !gun_2;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = Rmissflare;
		return (0);
	}
	if( gun_3 == 2 )
	{
		piecenum = Lmissflare;
		return (0);
	}
}

AimFromTertiary(piecenum)
{
	piecenum = launcher;
}

AimTertiary(heading, pitch)
{
	return (1);
}

FireTertiary()
{
	if( gun_3 == 1 )
	{
		gun_3 = ruparm;
		return (0);
	}
	if( gun_3 == 2 )
	{
		gun_3 = body;
		return (0);
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode ruparm type BITMAPONLY | BITMAP1;
		explode Rarm type BITMAPONLY | BITMAP1;
		explode rhand type BITMAPONLY | BITMAP1;
		explode Rweapon type SHATTER | BITMAP4;
		explode Raim1 type SHATTER | BITMAP4;
		explode Rbarr1 type SHATTER | BITMAP4;
		explode Rbflare1 type BITMAPONLY | BITMAP1;
		explode Raim2 type BITMAPONLY | BITMAP1;
		explode Rbarr2 type BITMAPONLY | BITMAP1;
		explode Rbflare2 type BITMAPONLY | BITMAP1;
		explode Raim3 type BITMAPONLY | BITMAP1;
		explode Rbarr3 type BITMAPONLY | BITMAP1;
		explode Rbflare3 type BITMAPONLY | BITMAP1;
		explode luparm type BITMAPONLY | BITMAP1;
		explode Larm type BITMAPONLY | BITMAP1;
		explode lhand type BITMAPONLY | BITMAP1;
		explode Lweapon type BITMAPONLY | BITMAP1;
		explode Laim1 type BITMAPONLY | BITMAP1;
		explode Lbarr1 type BITMAPONLY | BITMAP1;
		explode Lbflare1 type BITMAPONLY | BITMAP1;
		explode Laim2 type BITMAPONLY | BITMAP1;
		explode Lbarr2 type BITMAPONLY | BITMAP1;
		explode Lbflare2 type BITMAPONLY | BITMAP1;
		explode Laim3 type BITMAPONLY | BITMAP1;
		explode Lbarr3 type BITMAPONLY | BITMAP1;
		explode Lbflare3 type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP1;
		explode Rmissflare type BITMAPONLY | BITMAP1;
		explode Lmissflare type BITMAPONLY | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode Rhileg type BITMAPONLY | BITMAP1;
		explode Rleg type BITMAPONLY | BITMAP1;
		explode Rdownleg type BITMAPONLY | BITMAP1;
		explode Rfoot type BITMAPONLY | BITMAP1;
		explode Rbackfing type BITMAPONLY | BITMAP1;
		explode Rfinger type BITMAPONLY | BITMAP1;
		explode Rfinger1 type BITMAPONLY | BITMAP1;
		explode Rfinger2 type BITMAPONLY | BITMAP1;
		explode Lhileg type BITMAPONLY | BITMAP1;
		explode Lleg type BITMAPONLY | BITMAP1;
		explode Ldownleg type BITMAPONLY | BITMAP1;
		explode Lfoot type BITMAPONLY | BITMAP1;
		explode Lbackfing type BITMAPONLY | BITMAP1;
		explode Lfinger type BITMAPONLY | BITMAP1;
		explode Lfinger1 type BITMAPONLY | BITMAP1;
		explode Lfinger2 type BITMAPONLY | BITMAP1;
		explode head type BITMAPONLY | BITMAP1;
		explode Raim type BITMAPONLY | BITMAP1;
		explode Rbarrl type BITMAPONLY | BITMAP1;
		explode Rheadflare type BITMAPONLY | BITMAP1;
		explode Laim type BITMAPONLY | BITMAP1;
		explode Lbarrl type BITMAPONLY | BITMAP1;
		explode Lheadflare type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode body type SHATTER | BITMAP4;
		explode ruparm type SHATTER | BITMAP4;
		explode Rarm type SHATTER | BITMAP4;
		explode rhand type SHATTER | BITMAP4;
		explode Rweapon type SHATTER | BITMAP4;
		explode Raim1 type SHATTER | BITMAP4;
		explode Rbarr1 type SHATTER | BITMAP4;
		explode Rbflare1 type SHATTER | BITMAP4;
		explode Raim2 type SHATTER | BITMAP4;
		explode Rbarr2 type SHATTER | BITMAP4;
		explode Rbflare2 type SHATTER | BITMAP4;
		explode Raim3 type SHATTER | BITMAP4;
		explode Rbarr3 type SHATTER | BITMAP4;
		explode Rbflare3 type SHATTER | BITMAP4;
		explode luparm type SHATTER | BITMAP4;
		explode Larm type SHATTER | BITMAP4;
		explode lhand type SHATTER | BITMAP4;
		explode Lweapon type SHATTER | BITMAP4;
		explode Laim1 type SHATTER | BITMAP4;
		explode Lbarr1 type SHATTER | BITMAP4;
		explode Lbflare1 type SHATTER | BITMAP4;
		explode Laim2 type SHATTER | BITMAP4;
		explode Lbarr2 type SHATTER | BITMAP4;
		explode Lbflare2 type SHATTER | BITMAP4;
		explode Laim3 type SHATTER | BITMAP4;
		explode Lbarr3 type SHATTER | BITMAP4;
		explode Lbflare3 type SHATTER | BITMAP4;
		explode launcher type SHATTER | BITMAP4;
		explode Rmissflare type SHATTER | BITMAP4;
		explode Lmissflare type SHATTER | BITMAP4;
		explode pelvis type SHATTER | BITMAP4;
		explode Rhileg type SHATTER | BITMAP4;
		explode Rleg type SHATTER | BITMAP4;
		explode Rdownleg type SHATTER | BITMAP4;
		explode Rfoot type SHATTER | BITMAP4;
		explode Rbackfing type SHATTER | BITMAP4;
		explode Rfinger type SHATTER | BITMAP4;
		explode Rfinger1 type SHATTER | BITMAP4;
		explode Rfinger2 type SHATTER | BITMAP4;
		explode Lhileg type SHATTER | BITMAP4;
		explode Lleg type SHATTER | BITMAP4;
		explode Ldownleg type SHATTER | BITMAP4;
		explode Lfoot type SHATTER | BITMAP4;
		explode Lbackfing type SHATTER | BITMAP4;
		explode Lfinger type SHATTER | BITMAP4;
		explode Lfinger1 type SHATTER | BITMAP4;
		explode Lfinger2 type SHATTER | BITMAP4;
		explode head type SHATTER | BITMAP4;
		explode Raim type SHATTER | BITMAP4;
		explode Rbarrl type SHATTER | BITMAP4;
		explode Rheadflare type SHATTER | BITMAP4;
		explode Laim type SHATTER | BITMAP4;
		explode Lbarrl type SHATTER | BITMAP4;
		explode Lheadflare type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rweapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Raim1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbarr1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbflare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Raim2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbarr2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbflare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Raim3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbarr3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbflare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lweapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Laim1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lbarr1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lbflare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Laim2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lbarr2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lbflare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Laim3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lbarr3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lbflare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rmissflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lmissflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rhileg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rdownleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbackfing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rfinger type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rfinger1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rfinger2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lhileg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Ldownleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lbackfing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lfinger type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lfinger1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lfinger2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Raim type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbarrl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rheadflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Laim type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lbarrl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lheadflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rweapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Raim1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbarr1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbflare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Raim2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbarr2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbflare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Raim3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbarr3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbflare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lweapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Laim1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lbarr1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lbflare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Laim2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lbarr2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lbflare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Laim3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lbarr3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lbflare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rmissflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lmissflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rhileg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rdownleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbackfing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rfinger type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rfinger1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rfinger2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lhileg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Ldownleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lbackfing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lfinger type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lfinger1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lfinger2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Raim type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbarrl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rheadflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Laim type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lbarrl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lheadflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
