#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wingp1, wingp2, wing2, wing1;

static-var  statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		turn wingp1 to y-axis <0.000000> now;
		turn wingp1 to y-axis <51.642857> speed <38.945055>;
		turn wingp2 to y-axis <0.000000> now;
		turn wingp2 to y-axis <-51.164835> speed <38.587912>;
		turn wing2 to x-axis <0.000000> now;
		turn wing2 to x-axis <-8.126374> speed <6.126374>;
		turn wing1 to x-axis <0.000000> now;
		turn wing1 to x-axis <-8.604396> speed <6.489011>;
		sleep 1326;
	}
	sleep 60;
}

deactivatescr()
{
	if( TRUE )
	{
		turn wingp1 to y-axis <51.642857> now;
		turn wingp1 to y-axis <0.000000> speed <38.945055>;
		turn wingp2 to y-axis <-51.164835> now;
		turn wingp2 to y-axis <0.000000> speed <38.587912>;
		turn wing2 to x-axis <-8.126374> now;
		turn wing2 to x-axis <0.000000> speed <6.126374>;
		turn wing1 to x-axis <-8.604396> now;
		turn wing1 to x-axis <0.000000> speed <6.489011>;
		sleep 1326;
	}
	sleep 60;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		explode wingp1 type BITMAPONLY | BITMAP2;
		explode wingp2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type SHATTER | BITMAP5;
		explode wing2 type SHATTER | BITMAP1;
		explode wingp1 type FALL | BITMAP2;
		explode wingp2 type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type SHATTER | BITMAP5;
		explode wing2 type SHATTER | BITMAP1;
		explode wingp1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wingp2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wingp1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wingp2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
