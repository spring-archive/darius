#define TAK

#include "constants.h"

piece  flare1, flare2, base, gun, wing1, wing2, thrust, x, z, predrop, drop;

static-var  gun_2, statechg_DesiredState, statechg_StateChanging, firing;

//fakeupright
#define FAKE_UPRIGHT_TARGET_PARENT	predrop
#define FAKE_UPRIGHT_TARGET_CHILD	drop	//piece to make upright
#define FAKE_UPRIGHT_REFERENCE		base	
#define FAKE_UPRIGHT_X				x	
#define FAKE_UPRIGHT_Z				z	

#include "fakeupright.h"

// Signal definitions
#define SIG_AIM_2			4
#define SIG_AIM_4			16
#define SIG_FIRE			32

Sounds()
{
	play-sound("weapons/build2", 10);
}

activatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [0.] now;
		move wing1 to x-axis [16] speed [16];
		move wing1 to z-axis [0.] now;
		move wing1 to z-axis [-4] speed [4];
		move wing2 to x-axis [0.] now;
		move wing2 to x-axis [-16] speed [16];
		move wing2 to z-axis [0.] now;
		move wing2 to z-axis [-4] speed [4];
		sleep 998;
	}
	sleep 44;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [16] now;
		move wing1 to x-axis [0.] speed [16];
		move wing1 to z-axis [-4] now;
		move wing1 to z-axis [0.] speed [4];
		move wing2 to x-axis [-16] now;
		move wing2 to x-axis [0.] speed [16];
		move wing2 to z-axis [-4] now;
		move wing2 to z-axis [0.] speed [4];
		sleep 998;
	}
	sleep 44;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	//stupid non-aligned flares...
	turn flare1 to y-axis <200.000000> now;
	turn flare2 to y-axis <10.000000> now;
	gun_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
	hide predrop;
	hide drop;
	call-script FakeUprightInit();
    /*turn drop to x-axis <80> now;
    if (rand(0, 2))
    {
        spin drop around y-axis speed <820>;
    }
    else
    {
        spin drop around y-axis speed <-820>;
    }*/
	return (0);

}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

RestoreAfterDelay()
{
	sleep 3000;
	turn gun to y-axis <0.> speed <90.>;
	return (0);
}

AimPrimary(heading, pitch)
{
	return (1);
}


FirePrimary()
{
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = base;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = base;
	return (0);
}


AimWeapon2(heading, pitch)
{
	return (1);
}

FireWeapon2()
{
    emit-sfx 1025 from gun;
	if ( gun_2 == 0)
	{
	    emit-sfx 1024 from flare1;
		gun_2 = 1;
	}
	else if ( gun_2 == 1)
	{
	    emit-sfx 1024 from flare2;
		gun_2 = 0;
	}
}

AimFromWeapon2(piecenum)
{
	return gun;
}

QueryWeapon2(piecenum)
{
	if ( gun_2 == 0)
	{
		piecenum = flare1;
	}
	if ( gun_2 == 1 )
	{
	    piecenum = flare2;
	}
}

FireLoop() {
	set-signal-mask SIG_FIRE;
	while(1)
	{
		call-script FakeUprightTurn();
		emit-sfx 2050 from drop;
		sleep 25; // Fire density. To fire every frame, this is set to 25, a bit less than the frame length.
	}
}

StopAfterDelay(){
	sleep 600;
	signal SIG_FIRE;
	firing = 0;
}

AimWeapon4(heading, pitch) {
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	if (!firing) {
		firing = 1;
		start-script FireLoop();
	}
	GET PLAY_SOUND(0, 655360);
	start-script StopAfterDelay();
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP3;
		explode flare2 type FALL | BITMAP4;
		explode gun type FALL | BITMAP5;
		explode thrust type FALL | BITMAP1;
		explode wing1 type SHATTER | BITMAP2;
		explode wing2 type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP3;
		explode flare2 type FALL | BITMAP4;
		explode gun type FALL | BITMAP5;
		explode thrust type FALL | BITMAP1;
		explode wing1 type SHATTER | BITMAP2;
		explode wing2 type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode thrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wing1 type SHATTER | BITMAP2;
		explode wing2 type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 1;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode thrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}


