piece head,hips,chest,rthigh,lthigh,lshin,rshin,rfoot,lfoot, wrist, claw1, claw2,
rshoulder, rforearm;

static-var isMoving, isAiming, shooting_num;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			16

#include "sfxtype.h"
#include "exptype.h"
		
lua_QueryNanoPiece() 
{
  return 0;
}

DamageControl()
{
	while (get BUILD_PERCENT_LEFT) {
		sleep 1000;
	}
	var health;
	while (TRUE)
	{
		health = get HEALTH;
		if (health < 50)
		{
			emit-sfx SFXTYPE_WHITESMOKE from hips;
			if (health < 25)
			{	
				emit-sfx SFXTYPE_BLACKSMOKE from chest;
			}
		}
		sleep 1000;
	}
}

walk()
{
	turn rthigh 	to y-axis <0> 		speed <135>;
	turn lthigh 	to y-axis <0> 		speed <130>;
	
	turn rthigh 	to z-axis <0> 		speed <135>;
	turn lthigh 	to z-axis <0> 		speed <130>;
	turn lfoot 	to z-axis <0> 		speed <130>;
	turn rfoot 	to z-axis <0> 		speed <130>;
			
	if (isMoving)
	{
			Turn rshin to x-axis <85> speed<260>;	
			Turn rthigh to x-axis <-100> speed<135>;
			Turn lthigh to x-axis <30> speed<135>;
			Turn chest to y-axis <10> speed<60>;
			wait-for-move hips along y-axis;		
			move hips to y-axis [1.2] speed <4200>;
			wait-for-move hips along y-axis;
			turn rshin to x-axis <10> speed <315>;
			move hips to y-axis [0] speed <4200>;
	}
	if (isMoving)
	{
			Turn lshin to x-axis <85> speed<260>;
			Turn lthigh to x-axis <-100> speed<135>;
			turn rthigh to x-axis <30> speed <135>;
			Turn chest to y-axis <-10> speed<60>;
			wait-for-move hips along y-axis;
			move hips to y-axis [1.2] speed <4200>;	
			wait-for-move hips along y-axis;
			turn lshin to x-axis <10> speed <315>;
			move hips to y-axis [0] speed <4200>;
	}
}


shootwalk()
{
	turn rthigh 	to y-axis <0> 		speed <135>;
	turn lthigh 	to y-axis <0> 		speed <130>;
	
	turn rthigh 	to z-axis <0> 		speed <135>;
	turn lthigh 	to z-axis <0> 		speed <130>;
	turn lfoot 	to z-axis <0> 		speed <130>;
	turn rfoot 	to z-axis <0> 		speed <130>;
		
	if (isMoving)
	{
			Turn rshin to x-axis <85> speed<260>;	
			Turn rthigh to x-axis <-100> speed<135>;
			Turn lthigh to x-axis <30> speed<135>;
			wait-for-move hips along y-axis;		
			move hips to y-axis [1.2] speed <4200>;
			wait-for-move hips along y-axis;
			turn rshin to x-axis <10> speed <315>;
			move hips to y-axis [0] speed <4200>;
	}		
	if (isMoving)
	{
			Turn lshin to x-axis <85> speed<260>;
			Turn lthigh to x-axis <-100> speed<135>;
			turn rthigh to x-axis <30> speed <135>;
			wait-for-move hips along y-axis;
			move hips to y-axis [1.2] speed <4200>;	
			wait-for-move hips along y-axis;
			turn lshin to x-axis <10> speed <315>;
			move hips to y-axis [0] speed <4200>;
	}
}

stopwalk ()
{
	turn lfoot		to x-axis <0> 		speed <395>;
	turn rfoot		to x-axis <0> 		speed <395>;
	turn rthigh 	to x-axis <0> 		speed <235>;
	turn lthigh 	to x-axis <0> 		speed <230>;
	turn lshin  	to x-axis <0> 		speed <235>;
	turn rshin 	to x-axis <0> 		speed <230>;
	
	turn rthigh 	to y-axis <-20> 	speed <135>;
	turn lthigh 	to y-axis <20> 		speed <130>;
	
	turn rthigh 	to z-axis <3> 		speed <135>;
	turn lthigh 	to z-axis <-3> 		speed <130>;
	turn lfoot 	to z-axis <3> 		speed <130>;
	turn rfoot 	to z-axis <-3>		speed <130>;
}



StartMoving()
{
	isMoving = TRUE;
}

StopMoving()
{
	isMoving = FALSE;
}

MotionControl()
{
	while ( TRUE )
	{              
		IF (isMoving)
		{
			IF (isAiming)
			{
				CALL-SCRIPT shootwalk();
			}
                else
			{
				CALL-SCRIPT walk();
			}
		}
		else
		{
			CALL-SCRIPT stopwalk();
			sleep 120; 
		}
	}
}

Create()
{
	isMoving = FALSE;
	isAiming = FALSE;
	shooting_num=1;
	start-script MotionControl();	
	start-script DamageControl();
	set INBUILDSTANCE to 1;
}
	
SweetSpot(piecenum)
{
	piecenum=chest;
}

StartBuilding(Func_Var_1)
{
	turn rshoulder to x-axis <-60> speed <150>;
	turn claw1 to x-axis <-30> speed <150>;
	turn claw2 to x-axis <30> speed <150>;
}

StopBuilding()
{
	turn rshoulder to x-axis <0> speed <100>;
	turn claw1 to x-axis <0> speed <100>;
	turn claw2 to x-axis <0> speed <100>;
}

QueryNanoPiece(piecenum)
{
	piecenum = wrist;
	call-script lua_QueryNanoPiece(piecenum);
}

Killed( severity, corpsetype )
{
	if (severity <= 25)
	{
		corpsetype = 1;
		explode hips type		SHATTER;
		explode chest type		SHATTER;
		explode head type		FALL | FIRE | BITMAP2;
		return( 0 );
	}

	if (severity <= 50)
	{
		corpsetype = 2;
		explode hips type		SHATTER;
		explode chest type		SHATTER;
		explode head type		FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return( 0 );
	}

	corpsetype = 3;
	explode hips type		SHATTER;
	explode chest type		SHATTER;
	explode head type		FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	
	return( 0 );
}