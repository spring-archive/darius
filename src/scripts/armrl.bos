#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, barrel, launcher, muzzle, exhaust, pontoons;

static-var  gun_1, barrel_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	hide flare;
	dont-cache barrel;
	dont-cache launcher;
	dont-cache turret;
	dont-cache flare;
	dont-shade barrel;
	dont-shade launcher;
	dont-shade turret;
	dont-shade flare;
	gun_1 = flare;
	barrel_1 = 1;
	start-script SmokeUnit();
	hide muzzle;
	hide exhaust;
	if (GET GROUND_HEIGHT(GET UNIT_XZ)) hide pontoons;
}

Reload()
{
	if( gun_1 >= 0 )
	{
		sleep 11000;
		gun_1 = (gun_1 - 1);
	}
}

AimPrimary(heading, pitch)
{
	if( gun_1 <= 3 )
	{
		signal SIG_AIM;
		set-signal-mask SIG_AIM;
		turn turret to y-axis heading speed <450.000000>;
		turn launcher to x-axis <0.000000> - pitch speed <450.000000>;
		//wait-for-turn barrel around z-axis;
		wait-for-turn turret around y-axis;
		wait-for-turn launcher around x-axis;
		return (1);
		}
	if( gun_1 >= 4 )
	{
		sleep 15;

	}
}

FirePrimary()
{
	++gun_1;
	++barrel_1;
	if( barrel_1 == 1 )
	{
		turn barrel to z-axis <0.000000> speed <300.000000>;
	}
	if( barrel_1 == 2 )
	{
		turn barrel to z-axis <120.027473> speed <300.000000>;
	}
	if( barrel_1 == 3 )
	{
		turn barrel to z-axis <-120.027473> speed <300.000000>;
		barrel_1 = 0;
	}
	emit-sfx 1024 from muzzle;
	emit-sfx 1025 from exhaust;
	start-script reload();
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
