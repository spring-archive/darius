#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, launcher, flare1, flare2, flare3, exhaust1, exhaust2, exhaust3;

static-var  gun_1, barrel_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	gun_1 = 1;
	barrel_1 = 1;
	turn exhaust1 to y-axis <180> now;
	turn exhaust2 to y-axis <180> now;
	turn exhaust3 to y-axis <180> now;	
	start-script SmokeUnit();
}

Reload()
{
	if( gun_1 >= 1 )
	{
		sleep 11000;
		gun_1 = (gun_1 - 1);
	}
}

AimPrimary(heading, pitch)
{
	if( gun_1 <= 3 )
	{
		signal SIG_AIM;
		set-signal-mask SIG_AIM;
		turn turret to y-axis heading speed <450.000000>;
		turn launcher to x-axis <0.000000> - pitch speed <450.000000>;
		//wait-for-turn barrel around z-axis;
		wait-for-turn turret around y-axis;
		wait-for-turn launcher around x-axis;
		return (1);
		}
	if( gun_1 >= 4 )
	{
		sleep 15;

	}
}

FirePrimary()
{
	++gun_1;
	++barrel_1;
	if( barrel_1 == 1 )
	{
		emit-sfx 1024 from flare1;
		emit-sfx 1025 from exhaust1;
	}
	if( barrel_1 == 2 )
	{
		emit-sfx 1024 from flare2;
		emit-sfx 1025 from exhaust2;
	}
	if( barrel_1 == 3 )
	{
		emit-sfx 1024 from flare3;
		emit-sfx 1025 from exhaust3;
		barrel_1 = 0;
	}
	start-script reload();
	return (1);
}

AimFromPrimary(piecenum)
{
		piecenum = flare3;
}

QueryPrimary(piecenum)
{
	if( barrel_1 == 1 )
	{
		piecenum = flare1;
	}
	if( barrel_1 == 2 )
	{
		piecenum = flare2;
	}
	if( barrel_1 == 3 )
	{
		piecenum = flare3;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode launcher type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
