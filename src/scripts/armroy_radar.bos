#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece	base, body, sonar, propeller,
		turret, sleeve1, sleeve2, barrel1, barrel2, fire1, fire2, radarpole, radardish,
		depthcharge1, depthcharge2, depthcharge3, depthcharge4, depthcharge5, depthchargefire,
		wake1, wake2, wake3, wake4;

static-var  gun_1, restore_delay, bMoving, gun_1_yaw;

// Signal definitions
#define SIG_AIM					4

#define DEPTHCHARGE_Y			[0.9]
#define DEPTHCHARGE_Z			[3.95]
#define DEPTHCHARGE_ROLL		<-115>
#define DEPTHCHARGE_LIFT		[16]
#define DEPTHCHARGE_LOAD_Y		[3.6]
#define DEPTHCHARGE_LOAD_Z		[15.8]
#define DEPTHCHARGE_LOAD_ROLL	[-460]

//rockz
#define ROCK_PIECE				base	//piece to rock
#define ROCK_Z_SPEED			3		//number of quarter-cycles per second around z-axis
#define ROCK_Z_DECAY			-1/2	//rocking around z-axis is reduced by this factor each time; should be negative to alternate rocking direction
#define ROCK_Z_MIN              <0.5>	//if around z-axis rock is not greater than this amount rocking will stop after returning to center
#define SIG_ROCK_Z				16		//signal to prevent multiple rocking
#include "rockz.h"

#define ROCK_Z_FIRE_1			-5

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

EmitWakes()
{
	while( TRUE )
	{
		if( bMoving )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
			emit-sfx 2 from wake3;
			emit-sfx 2 from wake4;
			emit-sfx 259 from propeller;
		}
		sleep 150;
	}
}

Create()
{
	gun_1 = 0;
	bMoving = FALSE;
	restore_delay = 3000;
	call-script RockZInit();
	start-script SmokeUnit();
	start-script EmitWakes();
	spin sonar around y-axis speed <60>;
	spin radarpole around y-axis speed <-90>;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <35.000000>;
	turn sleeve1 to x-axis <0.000000> speed <15.000000>;
	turn sleeve2 to x-axis <0.000000> speed <15.000000>;
}

StartMoving()
{
	bMoving = TRUE;
	spin propeller around z-axis speed <720>;
}

StopMoving()
{
	bMoving = FALSE;
	stop-spin propeller around z-axis;
}

AimWeapon2(heading, pitch)
{
	return (1);
}

FireWeapon2() {
	return (0);
}

Shot2(){
	move depthcharge1 to y-axis DEPTHCHARGE_Y now;
	move depthcharge2 to y-axis DEPTHCHARGE_Y now;
	move depthcharge3 to y-axis DEPTHCHARGE_Y now;
	move depthcharge4 to y-axis DEPTHCHARGE_Y now;
	
	move depthcharge1 to z-axis DEPTHCHARGE_Z now;
	move depthcharge2 to z-axis DEPTHCHARGE_Z now;
	move depthcharge3 to z-axis DEPTHCHARGE_Z now;
	move depthcharge4 to z-axis DEPTHCHARGE_Z now;
	
	move depthcharge5 to y-axis [-12] now;
	move depthcharge5 to z-axis [4.5] now;
	
	spin depthcharge1 around x-axis speed DEPTHCHARGE_ROLL;
	spin depthcharge2 around x-axis speed DEPTHCHARGE_ROLL;
	spin depthcharge3 around x-axis speed DEPTHCHARGE_ROLL;
	spin depthcharge4 around x-axis speed DEPTHCHARGE_ROLL;
	
	move depthcharge1 to y-axis 0 speed DEPTHCHARGE_Y;
	move depthcharge2 to y-axis 0 speed DEPTHCHARGE_Y;
	move depthcharge3 to y-axis 0 speed DEPTHCHARGE_Y;
	move depthcharge4 to y-axis 0 speed DEPTHCHARGE_Y;
	
	move depthcharge1 to z-axis 0 speed DEPTHCHARGE_Z;
	move depthcharge2 to z-axis 0 speed DEPTHCHARGE_Z;
	move depthcharge3 to z-axis 0 speed DEPTHCHARGE_Z;
	move depthcharge4 to z-axis 0 speed DEPTHCHARGE_Z;
	
	move depthcharge5 to y-axis DEPTHCHARGE_Y speed DEPTHCHARGE_LIFT;
	wait-for-move depthcharge5 along y-axis;
	move depthcharge5 to z-axis DEPTHCHARGE_Z speed DEPTHCHARGE_LIFT;
	wait-for-move depthcharge5 along z-axis;
	move depthcharge5 to y-axis 0 speed DEPTHCHARGE_LOAD_Y;
	move depthcharge5 to z-axis 0 speed DEPTHCHARGE_LOAD_Z;
	spin depthcharge5 around x-axis speed DEPTHCHARGE_LOAD_ROLL;
	
	wait-for-move depthcharge1 along z-axis;
	wait-for-move depthcharge2 along z-axis;
	wait-for-move depthcharge3 along z-axis;
	wait-for-move depthcharge4 along z-axis;
	wait-for-move depthcharge5 along z-axis;
	
	stop-spin depthcharge1 around x-axis;
	stop-spin depthcharge2 around x-axis;
	stop-spin depthcharge3 around x-axis;
	stop-spin depthcharge4 around x-axis;
	stop-spin depthcharge5 around x-axis;
}

AimFromWeapon2(piecenum)
{
	piecenum = depthchargefire;
}

QueryWeapon2(piecenum)
{
	piecenum = depthchargefire;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <150.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <40.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve1 around x-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	gun_1_yaw = heading;
	return (1);
}

FireWeapon1() {
	start-script RockZ(ROCK_Z_FIRE_1, gun_1_yaw);
	gun_1 = !gun_1;
	if( gun_1 ) {
		show fire1;
		hide fire1;
		move barrel1 to z-axis [-8] now;
		move barrel1 to z-axis 0 speed [8.000000];
	} else {
		show fire2;
		hide fire2;
		move barrel2 to z-axis [-8] now;
		move barrel2 to z-axis 0 speed [8.000000];
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

QueryWeapon1(piecenum) {
	if (gun_1) piecenum = fire1;
	else piecenum = fire2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype){
	explode body type BITMAPONLY | BITMAP1;
	if( severity <= 25 ) {
		corpsetype = 1;
		explode turret type BITMAPONLY | BITMAP1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode depthcharge1 type BITMAPONLY | BITMAP1;
	} else if( severity <= 50 ) {
		corpsetype = 2;
		explode turret type BITMAPONLY | BITMAP1;
		explode sleeve1 type FALL | BITMAP1;
		explode sleeve2 type FALL | BITMAP1;
		explode barrel1 type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP1;
		explode depthcharge1 type FALL | BITMAP1;
		explode depthcharge2 type FALL | BITMAP1;
		explode depthcharge3 type FALL | BITMAP1;
		explode depthcharge4 type FALL | BITMAP1;
		explode depthcharge5 type FALL | BITMAP1;
		explode radarpole type FALL | BITMAP1;
		explode radardish type FALL | BITMAP1;
		explode propeller type FALL | BITMAP1;
	} else {
		corpsetype = 3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode depthcharge1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode depthcharge2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode depthcharge3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode depthcharge4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode depthcharge5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode radarpole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode radardish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode propeller type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	}
}
