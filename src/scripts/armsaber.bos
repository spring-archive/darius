#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wings, guns, wing1, wing2, flare1, flare2;

static-var  Static_Var_1, gun_1, statechg_DesiredState, statechg_StateChanging;


Go()
{
	move wing1 to z-axis [0.000000] speed [2.000000];
	move wing1 to x-axis [0.000000] speed [5.000000];
	move wing2 to z-axis [0.000000] speed [2.000000];
	move wing2 to x-axis [0.000000] speed [5.000000];
	wait-for-move wing1 along x-axis;
	wait-for-move wing2 along x-axis;
	move wing1 to y-axis [0.000000] speed [1.000000];
	move wing2 to y-axis [0.000000] speed [1.000000];
	wait-for-move wing1 along y-axis;
	wait-for-move wing2 along y-axis;
	return (0);
}

Stop()
{
	move wing1 to y-axis [-0.500000] speed [1.000000];
	move wing2 to y-axis [-0.500000] speed [1.000000];
	wait-for-move wing1 along y-axis;
	wait-for-move wing2 along y-axis;
	move wing1 to z-axis [-1.500000] speed [2.000000];
	move wing1 to x-axis [4.000000] speed [5.000000];
	move wing2 to z-axis [-1.500000] speed [2.000000];
	move wing2 to x-axis [-4.000000] speed [5.000000];
	wait-for-move wing1 along x-axis;
	wait-for-move wing2 along x-axis;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = 1;
	Static_Var_1 = 0;
	move wing1 to y-axis [-0.500000] now;
	move wing1 to z-axis [-1.500000] now;
	move wing1 to x-axis [4.000000] now;
	move wing2 to y-axis [-0.500000] now;
	move wing2 to z-axis [-1.500000] now;
	move wing2 to x-axis [-4.000000] now;
	call-script InitState();
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 3000;
	set-signal-mask 0;
	turn guns to x-axis <0.000000> speed <50.000000>;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

FirePrimary()
{
	turn guns to x-axis <10.000000> speed <50.000000>;
	if( gun_1 == 0 )
	{
		gun_1 = 1;
	}
	else if( gun_1 == 1 )
	{
		gun_1 = 0;
	}
	start-script RestoreAfterDelay();
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wings type BITMAPONLY | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode wing1 type BITMAPONLY | BITMAP1;
		explode wing2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type FALL | BITMAP2;
		explode wing2 type FALL | BITMAP3;
		explode wings type SHATTER | BITMAP1;
		explode guns type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wing2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wings type SHATTER | BITMAP1;
		explode guns type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 1;
	explode base type BITMAPONLY | BITMAP1;
	explode wing1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wing2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wings type SHATTER | BITMAP1;
	explode guns type BITMAPONLY | BITMAP2;
}
