#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lfwheel, rfwheel, bwheel, turret, flare, body;

static-var  restore_delay, is_moving;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.021978>;
	turn turret to x-axis <0.000000> speed <50.010989>;
}

AimWeapon1(heading, pitch)
{
	if (is_moving == 1) return (0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis (heading) speed <250.00000>;
	turn turret to x-axis (0-pitch) speed <150.00000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

StartMoving()
{
	is_moving = 1;
	spin rfwheel around x-axis speed <200> accelerate <150>;
 	spin lfwheel around x-axis speed <200> accelerate <150>;
 	spin bwheel around x-axis speed <150> accelerate <150>;
}

StopMoving()
{
	is_moving = 0;
 	stop-spin rfwheel around x-axis;
 	stop-spin lfwheel around x-axis;
 	stop-spin bwheel around x-axis;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode lfwheel type BITMAPONLY | BITMAP2;
		explode rfwheel type BITMAPONLY | BITMAP3;
		explode bwheel type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode lfwheel type FALL | BITMAP2;
		explode rfwheel type FALL | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		explode bwheel type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode lfwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rfwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		explode bwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode lfwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rfwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | BITMAP4;
	explode bwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
