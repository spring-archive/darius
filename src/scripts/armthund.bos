#define TAK			// This is a TAK script

#include "constants.h"

piece  base, drop;

static-var firing, reload;

#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

ReFuel()
{
	while ( TRUE )
	{
		if((get CURRENT_FUEL) <= 50000000 )
		{
		}
		sleep 100;
	}
}

BlockShot2(unit, block)
{
	if((get CURRENT_FUEL) <= 50000000 )
	{
		block = 1;
		emit-sfx 256 | 1 from base;
	}
	return (1);
}

Create()
{
	start-script ReFuel();
	start-script SmokeUnit();
	hide drop;
}


QueryWeapon1(piecenum)
{
	piecenum = drop;
}

AimWeapon2(heading, pitch, fuel)
{
	if((get CURRENT_FUEL) <= 50000000 )
	{
		emit-sfx 257 | 1 from base;
		set CURRENT_FUEL to 0;
	}
	return (1);
}

QueryWeapon2(piecenum)
{
	piecenum = drop;
}

FireWeapon2(piecenum)
{
	piecenum = drop;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 2;
	explode base type BITMAPONLY | BITMAP1;
}
