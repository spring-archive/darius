#define TA			// This is a TA script

#include "constants.h"

piece  base, head, rupleg1, rupleg2, rupleg3, lupleg1, lupleg2, lupleg3,
       lleg3, lleg2, lleg1, rleg3, rleg2, rleg1, nano1, nano2, digger;

static-var  bMoving, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging, burrowed, maxSpeed;


walk()
{
	if( bMoving )
	{
		turn base to x-axis <2.098901> now;
		turn base to x-axis <0.000000> speed <21.000000>;
		turn base to y-axis <1.049451> now;
		turn base to y-axis <0.000000> speed <3.000000>;
		turn rupleg1 to y-axis <27.423077> now;
		turn rupleg1 to y-axis <7.000000> speed <198.000000>;
		turn rupleg2 to y-axis <-13.351648> now;
		turn rupleg2 to z-axis <0.000000> now;
		turn rupleg2 to z-axis <27.005495> speed <276.000000>;
		turn rupleg3 to y-axis <27.774725> now;
		turn rupleg3 to y-axis <7.000000> speed <205.000000>;
		turn lupleg1 to y-axis <21.434066> now;
		turn lupleg1 to z-axis <0.000000> now;
		turn lupleg1 to z-axis <-24.005495> speed <247.000000>;
		turn lupleg2 to y-axis <-14.412088> now;
		turn lupleg2 to y-axis <0.000000> speed <138.000000>;
		turn lupleg2 to z-axis <-7.379121> now;
		turn lupleg2 to z-axis <0.000000> speed <74.000000>;
		turn lupleg3 to y-axis <13.351648> now;
		turn lupleg3 to z-axis <0.000000> now;
		turn lupleg3 to z-axis <-45.010989> speed <456.000000>;
		turn lleg3 to z-axis <0.000000> now;
		turn lleg3 to z-axis <35.005495> speed <357.000000>;
		turn lleg2 to z-axis <0.000000> now;
		turn lleg2 to z-axis <-11.000000> speed <120.000000>;
		turn lleg1 to z-axis <0.000000> now;
		turn lleg1 to z-axis <11.000000> speed <116.000000>;
		turn rleg3 to z-axis <0.000000> now;
		turn rleg3 to z-axis <8.000000> speed <84.000000>;
		turn rleg2 to z-axis <0.000000> now;
		turn rleg2 to z-axis <-34.005495> speed <350.000000>;
		turn rleg1 to z-axis <0.000000> now;
		turn rleg1 to z-axis <9.000000> speed <95.000000>;
		sleep 149;
	}
	if( bMoving )
	{
		turn base to x-axis <-1.000000> speed <10.000000>;
		turn base to y-axis <0.000000> speed <10.000000>;
		turn rupleg1 to y-axis <-13.000000> speed <207.000000>;
		turn rupleg2 to y-axis <8.000000> speed <221.000000>;
		turn rupleg2 to z-axis <54.010989> speed <267.000000>;
		turn rupleg3 to y-axis <-14.000000> speed <218.000000>;
		turn lupleg1 to y-axis <1.000000> speed <200.000000>;
		turn lupleg1 to z-axis <-64.010989> speed <400.000000>;
		turn lupleg2 to y-axis <20.000000> speed <214.000000>;
		turn lupleg3 to y-axis <-10.000000> speed <235.000000>;
		turn lupleg3 to z-axis <-75.016484> speed <305.000000>;
		turn lleg3 to z-axis <63.010989> speed <281.000000>;
		turn lleg2 to z-axis <0.000000> speed <119.000000>;
		turn lleg1 to z-axis <66.010989> speed <548.000000>;
		turn rleg3 to z-axis <0.000000> speed <84.000000>;
		turn rleg2 to z-axis <-63.010989> speed <288.000000>;
		turn rleg1 to z-axis <0.000000> speed <94.000000>;
		sleep 150;
	}
	if( bMoving )
	{
		turn base to x-axis <-1.000000> speed <3.000000>;
		turn base to y-axis <-1.000000> speed <6.000000>;
		turn rupleg1 to y-axis <-20.000000> speed <69.000000>;
		turn rupleg2 to y-axis <17.000000> speed <83.000000>;
		turn rupleg2 to z-axis <8.000000> speed <454.000000>;
		turn rupleg3 to y-axis <-20.000000> speed <55.000000>;
		turn lupleg1 to y-axis <-10.000000> speed <118.000000>;
		turn lupleg1 to z-axis <-14.000000> speed <499.000000>;
		turn lupleg2 to y-axis <31.005495> speed <104.000000>;
		turn lupleg3 to y-axis <-15.000000> speed <55.000000>;
		turn lupleg3 to z-axis <-10.000000> speed <646.000000>;
		turn lleg3 to z-axis <17.000000> speed <454.000000>;
		turn lleg1 to z-axis <10.000000> speed <555.000000>;
		turn rleg2 to z-axis <-9.000000> speed <534.000000>;
		sleep 151;
	}
	if( bMoving )
	{
		turn base to x-axis <0.000000> speed <7.000000>;
		turn base to y-axis <0.000000> speed <10.000000>;
		turn rupleg1 to y-axis <-13.000000> speed <70.000000>;
		turn rupleg1 to z-axis <39.005495> speed <393.000000>;
		turn rupleg2 to y-axis <11.000000> speed <59.000000>;
		turn rupleg2 to z-axis <-2.000000> speed <105.000000>;
		turn rupleg3 to y-axis <-3.000000> speed <168.000000>;
		turn rupleg3 to z-axis <28.005495> speed <284.000000>;
		turn lupleg1 to y-axis <0.000000> speed <101.000000>;
		turn lupleg1 to z-axis <2.000000> speed <165.000000>;
		turn lupleg2 to y-axis <19.000000> speed <116.000000>;
		turn lupleg2 to z-axis <-40.005495> speed <407.000000>;
		turn lupleg3 to y-axis <-7.000000> speed <84.000000>;
		turn lupleg3 to z-axis <4.000000> speed <151.000000>;
		turn lleg3 to z-axis <0.000000> speed <179.000000>;
		turn lleg2 to z-axis <32.005495> speed <327.000000>;
		turn lleg1 to z-axis <0.000000> speed <105.000000>;
		turn rleg3 to z-axis <-17.000000> speed <175.000000>;
		turn rleg2 to z-axis <0.000000> speed <98.000000>;
		turn rleg1 to z-axis <-19.000000> speed <196.000000>;
		sleep 150;
	}
	if( bMoving )
	{
		turn base to x-axis <0.000000> speed <14.000000>;
		turn base to y-axis <1.000000> speed <14.000000>;
		turn rupleg1 to y-axis <8.000000> speed <210.000000>;
		turn rupleg1 to z-axis <52.010989> speed <133.000000>;
		turn rupleg2 to y-axis <0.000000> speed <112.000000>;
		turn rupleg3 to y-axis <15.000000> speed <189.000000>;
		turn rupleg3 to z-axis <48.010989> speed <196.000000>;
		turn lupleg1 to y-axis <9.000000> speed <98.000000>;
		turn lupleg2 to y-axis <3.000000> speed <158.000000>;
		turn lupleg2 to z-axis <-68.016484> speed <277.000000>;
		turn lupleg3 to y-axis <1.000000> speed <91.000000>;
		turn lleg3 to z-axis <-10.000000> speed <101.000000>;
		turn lleg2 to z-axis <64.010989> speed <316.000000>;
		turn lleg1 to z-axis <-5.000000> speed <59.000000>;
		turn rleg3 to z-axis <-52.010989> speed <348.000000>;
		turn rleg2 to z-axis <3.000000> speed <35.000000>;
		turn rleg1 to z-axis <-50.010989> speed <309.000000>;
		sleep 150;
	}
	if( bMoving )
	{
		turn base to x-axis <1.000000> speed <7.000000>;
		turn base to y-axis <1.000000> speed <3.000000>;
		turn rupleg1 to y-axis <16.000000> speed <84.000000>;
		turn rupleg1 to z-axis <39.005495> speed <133.000000>;
		turn rupleg2 to y-axis <-11.000000> speed <112.000000>;
		turn rupleg3 to y-axis <24.005495> speed <87.000000>;
		turn rupleg3 to z-axis <28.005495> speed <196.000000>;
		turn lupleg1 to y-axis <20.000000> speed <105.000000>;
		turn lupleg2 to y-axis <-3.000000> speed <77.000000>;
		turn lupleg2 to z-axis <-40.005495> speed <277.000000>;
		turn lupleg3 to y-axis <18.000000> speed <165.000000>;
		turn lleg3 to z-axis <0.000000> speed <101.000000>;
		turn lleg2 to z-axis <37.005495> speed <267.000000>;
		turn lleg1 to z-axis <0.000000> speed <59.000000>;
		turn rleg3 to z-axis <-17.000000> speed <348.000000>;
		turn rleg2 to z-axis <0.000000> speed <35.000000>;
		turn rleg1 to z-axis <-23.005495> speed <267.000000>;
		sleep 150;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Go()
{
	turn head to y-axis Static_Var_3 speed <160.000000>;
	wait-for-turn head around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn head to y-axis <0.000000> speed <160.000000>;
	wait-for-turn head around y-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Burrow()
{
	if (!burrowed)
	{
		emit-sfx 1024 from digger;
	}
	burrowed = 1;
	move base to y-axis [-1.500000] speed [1.500000];
	turn base to x-axis <-20.000000> speed <20.000000>;
	set CLOAKED to 1;
	set STEALTH to 1;
	set MAX_SPEED to maxSpeed / 4;
	set STANDINGFIREORDERS to 2;
}

UnBurrow()
{
	if (burrowed)
	{
		emit-sfx 1024 from digger;
	}
	burrowed = 0;
	set CLOAKED to 0;
	set STEALTH to 0;
	set STANDINGFIREORDERS to 0;
	move base to y-axis [0.000000] speed [2.000000];
	turn base to x-axis <0.000000> speed <60.000000>;
	set MAX_SPEED to maxSpeed;
}


MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script UnBurrow();
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
			call-script Burrow();
		}
	}
}

Create()
{
	maxSpeed = get MAX_SPEED;
	Static_Var_2 = 0;
	bMoving = FALSE;
	start-script SmokeUnit();
	call-script InitState();
	start-script MotionControl();
}



Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_2 == 0 )
	{
		piecenum = nano1;
		Static_Var_2 = 1;
		return (0);
	}
	if( Static_Var_2 == 1 )
	{
		piecenum = nano2;
		Static_Var_2 = 0;
	}
}

TargetHeading(Func_Var_1)
{
	Static_Var_3 = 0 - Func_Var_1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode head type BITMAPONLY | BITMAP1;
		explode lleg1 type BITMAPONLY | BITMAP2;
		explode lleg2 type BITMAPONLY | BITMAP1;
		explode lleg3 type BITMAPONLY | BITMAP2;
		explode lupleg1 type BITMAPONLY | BITMAP4;
		explode lupleg2 type BITMAPONLY | BITMAP2;
		explode lupleg3 type BITMAPONLY | BITMAP1;
		explode rleg1 type BITMAPONLY | BITMAP4;
		explode rleg2 type BITMAPONLY | BITMAP2;
		explode rleg3 type BITMAPONLY | BITMAP1;
		explode rupleg1 type BITMAPONLY | BITMAP3;
		explode rupleg2 type BITMAPONLY | BITMAP4;
		explode rupleg3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode head type FALL | BITMAP2;
		explode lleg1 type FALL | BITMAP2;
		explode lleg2 type FALL | BITMAP1;
		explode lleg3 type FALL | BITMAP2;
		explode lupleg1 type FALL | BITMAP4;
		explode lupleg2 type FALL | BITMAP2;
		explode lupleg3 type FALL | BITMAP1;
		explode rleg1 type FALL | BITMAP4;
		explode rleg2 type FALL | BITMAP2;
		explode rleg3 type FALL | BITMAP1;
		explode rupleg1 type FALL | BITMAP3;
		explode rupleg2 type FALL | BITMAP4;
		explode rupleg3 type FALL | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode head type FALL | FIRE | SMOKE | BITMAP2;
		explode lleg1 type FALL | FIRE | SMOKE | BITMAP2;
		explode lleg2 type FALL | FIRE | SMOKE | BITMAP1;
		explode lleg3 type FALL | FIRE | SMOKE | BITMAP2;
		explode lupleg1 type FALL | FIRE | SMOKE | BITMAP4;
		explode lupleg2 type FALL | FIRE | SMOKE | BITMAP2;
		explode lupleg3 type FALL | FIRE | SMOKE | BITMAP1;
		explode rleg1 type FALL | FIRE | SMOKE | BITMAP4;
		explode rleg2 type FALL | FIRE | SMOKE | BITMAP2;
		explode rleg3 type FALL | FIRE | SMOKE | BITMAP1;
		explode rupleg1 type FALL | FIRE | SMOKE | BITMAP3;
		explode rupleg2 type FALL | FIRE | SMOKE | BITMAP4;
		explode rupleg3 type FALL | FIRE | SMOKE | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode head type FALL | FIRE | SMOKE | BITMAP2;
	explode lleg1 type FALL | FIRE | SMOKE | BITMAP2;
	explode lleg2 type FALL | FIRE | SMOKE | BITMAP1;
	explode lleg3 type FALL | FIRE | SMOKE | BITMAP2;
	explode lupleg1 type FALL | FIRE | SMOKE | BITMAP4;
	explode lupleg2 type FALL | FIRE | SMOKE | BITMAP2;
	explode lupleg3 type FALL | FIRE | SMOKE | BITMAP1;
	explode rleg1 type FALL | FIRE | SMOKE | BITMAP4;
	explode rleg2 type FALL | FIRE | SMOKE | BITMAP2;
	explode rleg3 type FALL | FIRE | SMOKE | BITMAP1;
	explode rupleg1 type FALL | FIRE | SMOKE | BITMAP3;
	explode rupleg2 type FALL | FIRE | SMOKE | BITMAP4;
	explode rupleg3 type FALL | FIRE | SMOKE | BITMAP2;
}
