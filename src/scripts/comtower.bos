#define TAK

#include "constants.h"


piece  base, arm, turret, radar,
       antenna, door1, door2, nanopiece;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            statechg_DesiredState, statechg_StateChanging;

lua_QueryNanoPiece() 
{
  return 0;
}

Activatescr()
{
	if( TRUE )
	{
		turn turret to y-axis <0.000000> speed <40.000000>;
		turn door2 to z-axis <90.000000> speed <40.000000>;
		turn door1 to z-axis <-90.000000> speed <40.000000>;
		wait-for-turn door1 around z-axis;
	}
	if( TRUE )
	{
		move arm to y-axis [47.000000] speed [15.000000];
		wait-for-move arm along y-axis;
		set INBUILDSTANCE to 1;
	}
	sleep 10;
}

Deactivatescr()
{
	if( TRUE )
	{
		set INBUILDSTANCE to 0;
		turn turret to y-axis <0.000000> speed <40.000000>;
		move arm to y-axis [0.000000] speed [10.000000];
		wait-for-move arm along y-axis;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <30.000000>;
		turn door2 to z-axis <0.000000> speed <30.000000>;
		wait-for-turn door1 around z-axis;
		wait-for-turn door2 around z-axis;
	}

	sleep 10;
}

Go()
{
	set ARMORED to 0;

	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	sleep 300;
	spin turret around y-axis speed <10.000000>;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	set ARMORED to 1;
	stop-spin turret around y-axis;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	Static_Var_1 = 0;
	Static_Var_2 = 5000;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

//StartBuilding(Func_Var_1)
//{
//	Static_Var_1 = Func_Var_1;
//	start-script RequestState(0);
//}

//StopBuilding()
//{
//	start-script RequestState(1);
//}

QueryNanoPiece(piecenum)
{
	piecenum = nanopiece;
	call-script lua_QueryNanoPiece(piecenum);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = nanopiece;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode radar type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | BITMAP1;
		explode radar  type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode radar  type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
