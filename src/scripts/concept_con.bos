#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, wing1, wing2, nano1, nano2, flap1top, flap1bot, flap2top, flap2bot;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, nano;

// Signal definitions


activatescr()
{
	turn wing1 to z-axis <0> speed <90>;
	turn wing2 to z-axis <0> speed <90>;
	wait-for-turn wing1 around z-axis;
	wait-for-turn wing2 around z-axis;
}

deactivatescr()
{
	turn wing1 to z-axis <-75> speed <90>;
	turn wing2 to z-axis <75> speed <90>;
	wait-for-turn wing1 around z-axis;
	wait-for-turn wing2 around z-axis;
}

SmokeUnit()
{
	var healthpercent, sleeptime, smoketype;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	turn wing1 to z-axis <-80> now;
	turn wing2 to z-axis <80> now;
	hide nano1;
	hide nano2;
	nano = 0;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding()
{
	turn flap1top to x-axis <-75> speed <90>;
	turn flap1bot to x-axis <75> speed <90>;
	turn flap2top to x-axis <-75> speed <90>;
	turn flap2bot to x-axis <75> speed <90>;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	turn flap1top to x-axis <0> speed <90>;
	turn flap1bot to x-axis <0> speed <90>;
	turn flap2top to x-axis <0> speed <90>;
	turn flap2bot to x-axis <0> speed <90>;
}

QueryNanoPiece(piecenum)
{
	nano = !nano;
	if (nano) piecenum = nano1;
	else piecenum = nano2;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	explode body type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode wing1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode wing2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	if( severity <= 25 ) corpsetype = 1;
	else if( severity <= 50 ) corpsetype = 1;
	else corpsetype = 1;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}
