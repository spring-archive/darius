// by Chris Mackey

#include "sfxtype.h"
#include "exptype.h"

piece base, head, l_gun, l_gun_barr, r_gun, r_gun_barr, 
l_thigh, l_leg, l_foot,
r_thigh, r_leg, r_foot; 

static-var bMoving, bAiming, Static_Var_3, gun_1;

#define SIG_AIM				4


walk()
{
	
	turn l_thigh to x-axis <60> speed <130>; //back
	turn r_thigh to x-axis <0> speed <120>; //forward
	
	turn r_foot to x-axis <70> now;
	turn l_foot to x-axis <25> now;
	
	move base to y-axis [2] speed [5];
	turn base to z-axis <8> speed <30>;

	if( bMoving )
	{
		move r_leg to z-axis [1.5] speed [7]; //down
		move l_leg to z-axis [-1.5] speed [10]; //up
		
		move base to y-axis [2] speed [6];
		move base to z-axis [1] speed [5];
		
		sleep 160;
	}
	if( bMoving )
	{
		turn r_thigh to x-axis <60> speed <130>; //back
		turn l_thigh to x-axis <0> speed <120>; //forward
		
		turn r_foot to x-axis <25> now;
		turn l_foot to x-axis <70> now;
		
		move base to y-axis [-0.5] speed [9];
		move base to z-axis [-1] speed [5];
		turn base to z-axis <-8> speed <30>;
		
		sleep 200;
	}
	
	if( bMoving )
	{
		move l_leg to z-axis [1.5] speed [7]; //down
		move r_leg to z-axis [-1.5] speed [10]; //up
		
		move base to y-axis [2] speed [6];
		move base to z-axis [1] speed [5];
		
		sleep 160;
	}
	if( bMoving )
	{
		turn l_thigh to x-axis <60> speed <130>; //back
		turn r_thigh to x-axis <0> speed <120>; //forward
		
		turn l_foot to x-axis <25> now;
		turn r_foot to x-axis <70> now;
		
		move base to y-axis [-0.5] speed [9];
		move base to z-axis [-1] speed [5];
		turn base to z-axis <8> speed <30>;
		
		sleep 200;
	}
}

walklegs()
{	
	turn l_thigh to x-axis <60> speed <130>; //back
	turn r_thigh to x-axis <0> speed <120>; //forward
	
	turn r_foot to x-axis <70> now;
	turn l_foot to x-axis <25> now;
	
	move base to y-axis [2] speed [5];
	turn base to z-axis <8> speed <30>;

	if( bMoving )
	{
		move r_leg to z-axis [1.5] speed [7]; //down
		move l_leg to z-axis [-1.5] speed [10]; //up
		
		move base to y-axis [2] speed [6];
		move base to z-axis [1] speed [5];
		
		sleep 160;
	}
	if( bMoving )
	{
		turn r_thigh to x-axis <60> speed <130>; //back
		turn l_thigh to x-axis <0> speed <120>; //forward
		
		turn r_foot to x-axis <25> now;
		turn l_foot to x-axis <70> now;
		
		move base to y-axis [-0.5] speed [9];
		move base to z-axis [-1] speed [5];
		turn base to z-axis <-8> speed <30>;
		
		sleep 200;
	}
	
	if( bMoving )
	{
		move l_leg to z-axis [1.5] speed [7]; //down
		move r_leg to z-axis [-1.5] speed [10]; //up
		
		move base to y-axis [2] speed [6];
		move base to z-axis [1] speed [5];
		
		sleep 160;
	}
	if( bMoving )
	{
		turn l_thigh to x-axis <60> speed <130>; //back
		turn r_thigh to x-axis <0> speed <120>; //forward
		
		turn l_foot to x-axis <25> now;
		turn r_foot to x-axis <70> now;
		
		move base to y-axis [-0.5] speed [9];
		move base to z-axis [-1] speed [5];
		turn base to z-axis <8> speed <30>;
		
		sleep 200;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved ) // restores mbot to stationary position
			{
				turn r_thigh to x-axis <60> speed <200>;
				turn l_thigh to x-axis <60> speed <200>;
				
				move r_leg to z-axis [0] speed [200];
				move l_leg to z-axis [0] speed [200];
				
				turn r_foot to x-axis <30> speed <200>;
				turn l_foot to x-axis <30> speed <200>;
				
				move base to y-axis [0] speed [200];
				move base to z-axis [0] speed [200];
				turn base to z-axis <0> speed <200>;
				
				if( !aiming )
				{
					turn head to y-axis <0> speed <200>;
					
					turn r_gun to x-axis <0> speed <200>;
					turn l_gun to x-axis <0> speed <200>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	gun_1 = base;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(s)
{
	s = base;
}

RestoreAfterDelay()
{
	sleep 2750;
	turn head to y-axis <0> speed <90>;
	turn r_gun to x-axis <0> speed <45>;
	turn l_gun to x-axis <0> speed <45>;
	wait-for-turn head around y-axis;
	wait-for-turn r_gun around x-axis;
	wait-for-turn l_gun around x-axis;
	spin r_gun_barr around z-axis speed <0> accelerate <35>;
	spin l_gun_barr around z-axis speed <0> accelerate <35>;
	bAiming = FALSE;
}



AimFromPrimary(piecenum)
{
	piecenum = head;
}

QueryPrimary(piecenum)
{
	if( gun_1 )
	{
		piecenum = r_gun_barr;
	}
	else
	{
		piecenum = l_gun_barr;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_3 )
	{
		sleep 5;
	}
	turn head to y-axis heading speed <450>;
	turn l_gun to x-axis <0> - pitch speed <150>;
	turn r_gun to x-axis <0> - pitch speed <150>;
	wait-for-turn head around y-axis;
	wait-for-turn l_gun around x-axis;
	wait-for-turn r_gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = !gun_1;
	if( gun_1 )
	{
		emit-sfx 1024 from r_gun_barr;
		spin r_gun_barr around z-axis speed <1000> accelerate <50>;
	}
	else
	{
		emit-sfx 1024 from l_gun_barr;
		spin l_gun_barr around z-axis speed <1000> accelerate <50>;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode head type BITMAPONLY | BITMAP2;
		explode l_gun_barr type BITMAPONLY | BITMAP3;
		explode l_foot type BITMAPONLY | BITMAP4;
		explode l_leg type BITMAPONLY | BITMAP5;
		explode l_thigh type BITMAPONLY | BITMAP2;
		explode l_gun type BITMAPONLY | BITMAP3;
		explode r_gun_barr type BITMAPONLY | BITMAP5;
		explode r_foot type BITMAPONLY | BITMAP1;
		explode r_leg type BITMAPONLY | BITMAP2;
		explode r_thigh type BITMAPONLY | BITMAP4;
		explode r_gun type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode head type FALL | BITMAP2;
		explode l_gun_barr type FALL | BITMAP3;
		explode l_foot type FALL | BITMAP4;
		explode l_leg type FALL | BITMAP5;
		explode l_thigh type FALL | BITMAP2;
		explode l_gun type FALL | BITMAP3;
		explode r_gun_barr type FALL | BITMAP5;
		explode r_foot type FALL | BITMAP1;
		explode r_leg type FALL | BITMAP2;
		explode r_thigh type FALL | BITMAP4;
		explode r_gun type FALL | BITMAP5;
		explode base type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode l_gun_barr type SHATTER;
		explode l_foot type SHATTER;
		explode l_leg type SHATTER;
		explode l_thigh type SHATTER;
		explode l_gun type SHATTER;
		explode r_gun_barr type SHATTER;
		explode r_foot type SHATTER;
		explode r_leg type SHATTER;
		explode r_thigh type SHATTER;
		explode r_gun type SHATTER | BITMAP1;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode l_gun_barr type SHATTER;
	explode l_foot type SHATTER;
	explode l_leg type SHATTER;
	explode l_thigh type SHATTER;
	explode l_gun type SHATTER;
	explode r_gun_barr type SHATTER;
	explode r_foot type SHATTER;
	explode r_leg type SHATTER;
	explode r_thigh type SHATTER;
	explode r_gun type SHATTER | BITMAP1;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
