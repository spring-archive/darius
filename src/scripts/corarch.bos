#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  bflare, fflare, base, bbarrels, fbarrels,
       fturret, bturret, wakel, waker, hull, radar;

static-var restore_delay;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8

#define SIG_ROCK_Z				16		//Signal to prevent multiple rocking. REPLACE!
#define ROCK_PIECE				base	//piece to rock. REPLACE!
#define ROCK_Z_SPEED			3		//Number of half-cycles per second around z-axis.
#define ROCK_Z_DECAY			-1/2	//Rocking around z-axis is reduced by this factor each time; should be negative to alternate rocking direction.
#define ROCK_Z_MIN              <0.5>	//If around z-axis rock is not greater than this amount, rocking will stop after returning to center.

#define ROCK_Z_FIRE_3		-5

#include "rockz.h"

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

DishSpin()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	spin radar around y-axis speed <60>;
}

Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script RockZInit();
	start-script DishSpin();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn fturret to y-axis <0.000000> speed <75.000000>;
	turn fbarrels to x-axis <0.000000> speed <75.000000>;
	turn bturret to y-axis <0.000000> speed <75.000000>;
	turn bbarrels to x-axis <0.000000> speed <75.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 4 from wakel;
		emit-sfx 2 from waker;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimWeapon2(heading, pitch)
{
	turn fturret to y-axis heading speed <455.000000>;
	turn fbarrels to x-axis <0.000000> - pitch speed <430.000000>;
	wait-for-turn fturret around y-axis;
	wait-for-turn fbarrels around x-axis;
	return (1);
}

AimWeapon3(heading, pitch)
{
	turn bturret to y-axis heading speed <455.000000>;
	turn bbarrels to x-axis <0.000000> - pitch speed <430.000000>;
	wait-for-turn bturret around y-axis;
	wait-for-turn bbarrels around x-axis;
	return (1);
}

AimFromWeapon1(piecenum)
{
	piecenum = radar;
}

AimFromWeapon2(piecenum)
{
	piecenum = fturret;

}

AimFromWeapon3(piecenum)
{
	piecenum = bturret;
}

QueryWeapon1(piecenum)
{
	piecenum = radar;
}

QueryWeapon2(piecenum)
{
	piecenum = fflare;
}

QueryWeapon3(piecenum)
{
	piecenum = bflare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode fbarrels type BITMAPONLY | BITMAP2;
		explode bbarrels type BITMAPONLY | BITMAP3;
		explode bflare type BITMAPONLY | BITMAP1;
		explode fflare type BITMAPONLY | BITMAP2;
		explode hull type SHATTER | BITMAP2;
		explode fturret type BITMAPONLY | BITMAP3;
		explode bturret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode fbarrels type BITMAPONLY | BITMAP2;
		explode bbarrels type BITMAPONLY | BITMAP3;
		explode bflare type BITMAPONLY | BITMAP1;
		explode fflare type BITMAPONLY | BITMAP2;
		explode hull type SHATTER | BITMAP2;
		explode fturret type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode bturret type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode fbarrels type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrels type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode bflare type BITMAPONLY | BITMAP1;
		explode fflare type BITMAPONLY | BITMAP2;
		explode hull type SHATTER | BITMAP2;
		explode fturret type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode bturret type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode fbarrels type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrels type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode bflare type BITMAPONLY | BITMAP1;
	explode fflare type BITMAPONLY | BITMAP2;
	explode hull type SHATTER | BITMAP2;
	explode fturret type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode bturret type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
}
