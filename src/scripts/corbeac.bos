#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  gp, base, gear, collar, tower, sphere, emit1, emit2;

static-var  on, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2

#define TARGET_ALT			238435456
#define RAND_DIST			8192

Gravity() {
	var i;
	for (i = 0; i < 30; i = i + 1) {
		emit-sfx 2049 from emit1;
		sleep 30;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script Gravity();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Activate()
{
	on = 1;
}

Deactivate()
{
	on = 0;
}

RandomizeEmit() {
	var randx, randz, targetx, targetz;
	randx = (rand(0, 32767) - 16384) * RAND_DIST;
	randz = (rand(0, 32767) - 16384) * RAND_DIST;
	
	move emit2 to x-axis randx now;
	move emit2 to z-axis randz now;
}

Create()
{
	hide emit1;
	hide emit2;
	on = 1;
	move emit2 to y-axis TARGET_ALT now;
	turn emit1 to x-axis <-90> now;
	start-script SmokeUnit();
	spin gear around y-axis speed <15>;
	spin collar around y-axis speed <-30>;
	spin tower around y-axis speed <45>;
	spin sphere around y-axis speed <60>;
}

AimWeapon1(heading, pitch)
{
	return on;
}

FireWeapon1()
{
	call-script RandomizeEmit();
	start-script Gravity();
}

QueryWeapon1(piecenum)
{
	call-script RandomizeEmit();
	piecenum = emit2;
}

AimFromWeapon1(piecenum)
{
	call-script RandomizeEmit();
	piecenum = emit2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
}
