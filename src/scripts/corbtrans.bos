#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, lhigear, llogear, rhigear, rlogear, lturretex, lturret,
       lbarrel, lflare, rturretex, rturret, rbarrel, rflare, FLholderA, FLholderB,
       FLturbine, FRholderA, FRholderB, FRturbine, BLholderA, BLholderB, BLturbine, BRholderA,
       BRholderB, BRturbine, link, FLthrust, FRthrust, BLthrust, BRthrust;

static-var  Static_Var_1, unitviewer, Static_Var_3, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

activatescr()
{
	turn llogear to z-axis <0.000000> speed <100.000000>;
	turn rlogear to z-axis <0.000000> speed <100.000000>;
	turn llogear to z-axis <50.010989> speed <100.000000>;
	turn rlogear to z-axis <-50.010989> speed <100.000000>;
}

deactivatescr()
{
	turn llogear to z-axis <0.000000> speed <100.000000>;
	turn rlogear to z-axis <0.000000> speed <100.000000>;
	turn llogear to z-axis <-150.032967> speed <100.000000>;
	turn rlogear to z-axis <150.032967> speed <100.000000>;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep Static_Var_3;
	turn lturret to y-axis <90.021978> speed <300.000000>;
	turn lbarrel to x-axis <0.000000> speed <100.000000>;
	turn rturret to y-axis <-90.021978> speed <300.000000>;
	turn rbarrel to x-axis <0.000000> speed <100.000000>;
	move lturretex to x-axis [3.000000] speed [12.000000];
	move rturretex to x-axis [-3.000000] speed [12.000000];
}

ProcessFlames()
{
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 1024+0 from FLthrust;
			emit-sfx 1024+0 from FRthrust;
			emit-sfx 1024+0 from BLthrust;
			emit-sfx 1024+0 from BRthrust;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 1024+1 from FLthrust;
			emit-sfx 1024+1 from FRthrust;
			emit-sfx 1024+1 from BLthrust;
			emit-sfx 1024+1 from BRthrust;
		}
		sleep 40;
	}
}
Create()
{
	Static_Var_1 = 0;
	unitviewer = FALSE;
	Static_Var_3 = 3000;
	hide lflare;
	hide rflare;
	call-script InitState();
	start-script SmokeUnit();
	start-script RestoreAfterDelay();
	start-script ProcessFlames();
}

Demo()
{
	unitviewer = TRUE;
}



SweetSpot(piecenum)
{
	piecenum = body;
}

Activate()
{
	Static_Var_1 = 2;
	turn FLholderA to z-axis <-30.005495> speed <25.000000>;
	turn FRholderA to z-axis <30.005495> speed <25.000000>;
	turn BLholderA to z-axis <-30.005495> speed <25.000000>;
	turn BRholderA to z-axis <30.005495> speed <25.000000>;
	turn FLturbine to z-axis <30.005495> speed <25.000000>;
	turn FRturbine to z-axis <-30.005495> speed <25.000000>;
	turn BLturbine to z-axis <30.005495> speed <25.000000>;
	turn BRturbine to z-axis <-30.005495> speed <25.000000>;
	wait-for-turn FLholderA around z-axis;
	turn llogear to z-axis <-150.032967> speed <100.000000>;
	turn rlogear to z-axis <150.032967> speed <100.000000>;
	wait-for-turn rlogear around z-axis;
	turn body to x-axis <5.000000> speed <2.000000>;
	turn FLholderB to z-axis <-2.000000> speed <16.000000>;
	turn FRholderB to z-axis <2.000000> speed <16.000000>;
	turn BLholderB to z-axis <-2.000000> speed <16.000000>;
	turn BRholderB to z-axis <2.000000> speed <16.000000>;
	turn FLholderA to z-axis <-29.005495> speed <8.000000>;
	turn FRholderA to z-axis <29.005495> speed <8.000000>;
	turn BLholderA to z-axis <-29.005495> speed <8.000000>;
	turn BRholderA to z-axis <29.005495> speed <8.000000>;
	turn FLturbine to x-axis <10.000000> speed <20.000000>;
	turn FRturbine to x-axis <10.000000> speed <20.000000>;
	turn BLturbine to x-axis <10.000000> speed <20.000000>;
	turn BRturbine to x-axis <10.000000> speed <20.000000>;
	Static_Var_1 = 1;
}

Deactivate()
{
	Static_Var_1 = 2;
	turn body to x-axis <0.000000> speed <2.000000>;
	turn FLholderB to z-axis <0.000000> speed <16.000000>;
	turn FRholderB to z-axis <0.000000> speed <16.000000>;
	turn BLholderB to z-axis <0.000000> speed <16.000000>;
	turn BRholderB to z-axis <0.000000> speed <16.000000>;
	turn FLholderA to z-axis <-30.005495> speed <8.000000>;
	turn FRholderA to z-axis <30.005495> speed <8.000000>;
	turn BLholderA to z-axis <-30.005495> speed <8.000000>;
	turn BRholderA to z-axis <30.005495> speed <8.000000>;
	turn FLturbine to x-axis <0.000000> speed <20.000000>;
	turn FRturbine to x-axis <0.000000> speed <20.000000>;
	turn BLturbine to x-axis <0.000000> speed <20.000000>;
	turn BRturbine to x-axis <0.000000> speed <20.000000>;
	wait-for-turn FLturbine around x-axis;
	turn llogear to z-axis <0.000000> speed <100.000000>;
	turn rlogear to z-axis <0.000000> speed <100.000000>;
	wait-for-turn rlogear around z-axis;
	turn FLholderA to z-axis <30.005495> speed <25.000000>;
	turn FRholderA to z-axis <-30.005495> speed <25.000000>;
	turn BLholderA to z-axis <30.005495> speed <25.000000>;
	turn BRholderA to z-axis <-30.005495> speed <25.000000>;
	turn FLturbine to z-axis <-30.005495> speed <25.000000>;
	turn FRturbine to z-axis <30.005495> speed <25.000000>;
	turn BLturbine to z-axis <-30.005495> speed <25.000000>;
	turn BRturbine to z-axis <30.005495> speed <25.000000>;
	wait-for-turn BRholderA around z-axis;
	move body to y-axis [-1.000000] speed [4.000000];
	turn lhigear to z-axis <-3.000000> speed <12.000000>;
	turn rhigear to z-axis <3.000000> speed <12.000000>;
	turn llogear to z-axis <-3.000000> speed <12.000000>;
	turn rlogear to z-axis <3.000000> speed <12.000000>;
	wait-for-turn llogear around z-axis;
	turn lhigear to z-axis <0.000000> speed <12.000000>;
	turn rhigear to z-axis <0.000000> speed <12.000000>;
	turn llogear to z-axis <0.000000> speed <12.000000>;
	turn rlogear to z-axis <0.000000> speed <12.000000>;
	move body to y-axis [0.000000] speed [4.000000];
	Static_Var_1 = 0;
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = 26;
}

EndTransport()
{
	start-script RequestState(1);
}



//StopMoving()
//{
//	Static_Var_1 = 0;
//	
//}

//StartMoving()
//{
//	Static_Var_1 = 1;
//}

QueryPrimary(piecenum)
{
	piecenum = lflare;
}

AimFromPrimary(piecenum)
{
	piecenum = lturret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move lturretex to x-axis [0.000000] speed [12.000000];
	move rturretex to x-axis [0.000000] speed [12.000000];
	turn lturret to y-axis heading speed <300.000000>;
	turn lbarrel to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn lturret around y-axis;
	wait-for-turn lbarrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1026 from lflare;
}

QuerySecondary(piecenum)
{
	piecenum = rflare;
}

AimFromSecondary(piecenum)
{
	piecenum = rturret;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	move lturretex to x-axis [0.000000] speed [12.000000];
	move rturretex to x-axis [0.000000] speed [12.000000];
	turn rturret to y-axis heading speed <300.000000>;
	turn rbarrel to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn rturret around y-axis;
	wait-for-turn rbarrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	emit-sfx 1026 from rflare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode lhigear type BITMAPONLY | BITMAP1;
		explode llogear type BITMAPONLY | BITMAP1;
		explode rhigear type BITMAPONLY | BITMAP1;
		explode rlogear type BITMAPONLY | BITMAP1;
		explode lturretex type BITMAPONLY | BITMAP1;
		explode lturret type BITMAPONLY | BITMAP1;
		explode lbarrel type BITMAPONLY | BITMAP1;
		explode lflare type BITMAPONLY | BITMAP1;
		explode rturretex type BITMAPONLY | BITMAP1;
		explode rturret type BITMAPONLY | BITMAP1;
		explode rbarrel type BITMAPONLY | BITMAP1;
		explode rflare type BITMAPONLY | BITMAP1;
		explode FLholderA type BITMAPONLY | BITMAP1;
		explode FLholderB type BITMAPONLY | BITMAP1;
		explode FLturbine type BITMAPONLY | BITMAP1;
		explode FRholderA type BITMAPONLY | BITMAP1;
		explode FRholderB type BITMAPONLY | BITMAP1;
		explode FRturbine type BITMAPONLY | BITMAP1;
		explode BLholderA type BITMAPONLY | BITMAP1;
		explode BLholderB type BITMAPONLY | BITMAP1;
		explode BLturbine type BITMAPONLY | BITMAP1;
		explode BRholderA type BITMAPONLY | BITMAP1;
		explode BRholderB type BITMAPONLY | BITMAP1;
		explode BRturbine type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode body type SHATTER | BITMAP4;
		explode lhigear type SHATTER | BITMAP4;
		explode llogear type SHATTER | BITMAP4;
		explode rhigear type SHATTER | BITMAP4;
		explode rlogear type SHATTER | BITMAP4;
		explode lturretex type SHATTER | BITMAP4;
		explode lturret type SHATTER | BITMAP4;
		explode lbarrel type SHATTER | BITMAP4;
		explode lflare type SHATTER | BITMAP4;
		explode rturretex type SHATTER | BITMAP4;
		explode rturret type SHATTER | BITMAP4;
		explode rbarrel type SHATTER | BITMAP4;
		explode rflare type SHATTER | BITMAP4;
		explode FLholderA type SHATTER | BITMAP4;
		explode FLholderB type SHATTER | BITMAP4;
		explode FLturbine type SHATTER | BITMAP4;
		explode FRholderA type SHATTER | BITMAP4;
		explode FRholderB type SHATTER | BITMAP4;
		explode FRturbine type SHATTER | BITMAP4;
		explode BLholderA type SHATTER | BITMAP4;
		explode BLholderB type SHATTER | BITMAP4;
		explode BLturbine type SHATTER | BITMAP4;
		explode BRholderA type SHATTER | BITMAP4;
		explode BRholderB type SHATTER | BITMAP4;
		explode BRturbine type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lhigear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode llogear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rhigear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rlogear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lturretex type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rturretex type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FLholderA type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FLholderB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FLturbine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FRholderA type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FRholderB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FRturbine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BLholderA type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BLholderB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BLturbine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BRholderA type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BRholderB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BRturbine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 2;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lhigear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode llogear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rhigear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rlogear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lturretex type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rturretex type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FLholderA type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FLholderB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FLturbine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FRholderA type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FRholderB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FRturbine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BLholderA type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BLholderB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BLturbine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BRholderA type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BRholderB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BRturbine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
