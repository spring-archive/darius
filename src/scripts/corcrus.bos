#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wake1, wake2, box, chrgflare, turret, sleeve, barrels,
       patch, foreturret, foregun, foreflare, aftturret, aftgun, aftflare, flare1,
       flare2;

static-var  gun_1;

// Signal definitions
#define SIG_AIM_3			8
#define SIG_AIM_2			4
#define SIG_AIM				2
#define SIG_MOVE			16

#define RESTORE_DELAY_P			3000
#define RESTORE_DELAY_S			3000


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	gun_1 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep RESTORE_DELAY_P;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <45.000000>;
	turn sleeve to x-axis <0.000000> speed <50.000000>;
}

RestoreDeckLaser()
{
	sleep RESTORE_DELAY_S;
	set-signal-mask 0;
	turn foreturret to y-axis <0.000000> speed <150.000000>;
	turn foregun to x-axis <0.000000> speed <100.000000>;
	turn aftturret to y-axis <0.000000> speed <150.000000>;
	turn aftgun to x-axis <0.000000> speed <100.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

//---------------------------------------------------------------
//------ WEAPON 1 -----------------------------------------------
//---------------------------------------------------------------

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <90.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromWeapon1(piecenum)
{
	piecenum = sleeve;
}

Shot1()
{
	gun_1 = !gun_1;
	if (gun_1) emit-sfx 1024 from flare1;
	else emit-sfx 1024 from flare2;
}

QueryWeapon1(piecenum)
{
	if( gun_1 ) {
		piecenum = flare1;
	} else {
		piecenum = flare2;
	}
}

//---------------------------------------------------------------
//------ WEAPON 2+3 ---------------------------------------------
//---------------------------------------------------------------

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn foreturret to y-axis heading speed <300.000000>;
	turn foregun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn foreturret around y-axis;
	wait-for-turn foregun around x-axis;
	start-script RestoreDeckLaser();
	return (1);
}

AimFromWeapon2(piecenum)
{
	piecenum = foregun;
}

QueryWeapon2(piecenum)
{
	piecenum = foreflare;
}

FireWeapon2()
{
	emit-sfx 1025 from foreflare;
}



AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn aftturret to y-axis heading speed <300.000000>;
	turn aftgun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn aftturret around y-axis;
	wait-for-turn aftgun around x-axis;
	start-script RestoreDeckLaser();
	return (1);
}

AimFromWeapon3(piecenum)
{
	piecenum = aftgun;
}

QueryWeapon3(piecenum)
{
	piecenum = aftflare;
}

FireWeapon3()
{
	emit-sfx 1025 from aftflare;
}


//---------------------------------------------------------------
//------ WEAPON 4 -----------------------------------------------
//---------------------------------------------------------------

AimWeapon4(heading, pitch)
{
	return (1);
}

FireWeapon4()
{
	sleep 150;
}

AimFromWeapon4(piecenum)
{
	piecenum = base;
}

QueryWeapon4(piecenum)
{
	piecenum = base;
}


//---------------------------------------------------------------
//------ KILLED -------------------------------------------------
//---------------------------------------------------------------

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sleeve type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrels type BITMAPONLY | BITMAP2;
		explode foreturret type BITMAPONLY | BITMAP2;
		explode aftturret type BITMAPONLY | BITMAP1;
		explode foregun type BITMAPONLY | BITMAP3;
		explode aftgun type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		explode box type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrels type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode foreturret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode aftturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode foregun type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode aftgun type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		explode box type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrels type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode foreturret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode aftturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode foregun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode aftgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode box type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode turret type BITMAPONLY | BITMAP2;
	explode barrels type BITMAPONLY | BITMAP2;
	explode sleeve type BITMAPONLY | BITMAP3;
	explode foreturret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode aftturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode foregun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode aftgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode box type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
