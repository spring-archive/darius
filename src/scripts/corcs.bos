#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, arm1, arm2, armpiece, claw1, claw2, wake1, wake2, beam;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2
#define SIG_BUILD			4
#define RESTORE_DELAY		3000

lua_QueryNanoPiece() 
{
  return 0;
}

activatescr()
{
	if( TRUE )
	{
		turn arm1 to x-axis <60> speed <120>;
		turn arm2 to x-axis <-105> speed <210>;
		turn claw1 to x-axis <60> speed <150>;
		turn claw2 to x-axis <-20> speed <50>;
		turn turret to y-axis Static_Var_1 speed <150>;
		wait-for-turn turret around y-axis;
		wait-for-turn arm1 around x-axis;
	}
	sleep 13;
}

deactivatescr()
{
	if( TRUE )
	{
		turn arm1 to x-axis <0> speed <60>;
		turn arm2 to x-axis <0> speed <105>;
		turn claw1 to x-axis <0> speed <75>;
		turn claw2 to x-axis <0> speed <25>;
		turn turret to y-axis <0.000000> speed <150>;
		wait-for-turn turret around y-axis;
		wait-for-turn arm1 around x-axis;
	}
	sleep 15;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 4 from wake2;
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <150>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <150>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	set-signal-mask SIG_BUILD;
	sleep RESTORE_DELAY;
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	call-script lua_QueryNanoPiece(piecenum);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode arm1 type BITMAPONLY | BITMAP3;
		explode arm2 type BITMAPONLY | BITMAP4;
		explode claw1 type BITMAPONLY | BITMAP5;
		explode claw2 type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | BITMAP2;
		explode arm1 type FALL | BITMAP3;
		explode arm2 type FALL | BITMAP4;
		explode claw1 type SHATTER | BITMAP5;
		explode claw2 type FALL | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode claw1 type SHATTER | BITMAP5;
		explode claw2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode claw1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode claw2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
