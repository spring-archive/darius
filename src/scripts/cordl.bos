#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turretbase, turret1, turret2, charge1, charge2;

static-var  gun_1, gun_2, phase;

// Signal definitions
#define SIG_AIM1				1


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	dont-cache turret1;
	dont-cache turret2;
	dont-cache turretbase;
	dont-cache charge1;
	dont-cache charge2;
	dont-shade turret1;
	dont-shade turret2;
	dont-shade turretbase;
	dont-shade charge1;
	dont-shade charge2;
	gun_1 = 1;
	gun_2 = 1;
	start-script SmokeUnit();
	phase = 2;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	turn turretbase to y-axis heading speed <120.000000>;
	wait-for-turn turretbase around y-axis;
	return (1);
}

FirePrimary()
{

	if ( phase == 1 )
	{
	phase = 2;
	show charge2;
	hide charge2;
	}
	else
	if ( phase == 2 )
	{
	phase = 1;
	show charge1;
	hide charge1;
	}

	sleep 130;
	if(phase == 1)
	{

	if( gun_1 == 0 )
	{
		turn turret1 to y-axis <0.700000> speed <420.000000>;
	}
	if( gun_1 == 1 )
	{
		turn turret1 to y-axis <-89> speed <420.000000>;
	}
	if( gun_1 == 2 )
	{
		turn turret1 to y-axis <-180> speed <420.000000>;
	}
	if( gun_1 == 3 )
	{
		turn turret1 to y-axis <90> speed <420.000000>;
	}
	++gun_1;

	if( gun_1 == 4 )
	{
		gun_1 = 0;
	}

	}
	

	if(phase==2)
	{

	sleep 150;
	if( gun_2 == 0 )
	{
		turn turret2 to y-axis <-0.700000> speed <420.000000>;
	}
	if( gun_2 == 1 )
	{
		turn turret2 to y-axis <91> speed <420.000000>;
	}
	if( gun_2 == 2 )
	{
		turn turret2 to y-axis <180> speed <420.000000>;
	}
	if( gun_2 == 3 )
	{
		turn turret2 to y-axis <-90> speed <420.000000>;
	}
	++gun_2;

	if( gun_2 == 4 )
	{
		gun_2 = 0;
	}

	}


}

AimFromPrimary(piecenum)
{

if(phase==1)
{
	piecenum = charge1;
}
if(phase==2)
{
piecenum = charge2;
}

}


QueryPrimary(piecenum)
{

if(phase==1)
{
	piecenum = charge1;
}
if(phase==2)
{
piecenum = charge2;
}

}

SweetSpot(piecenum)
{
	piecenum = turretbase;
}

Killed(severity, corpsetype)
{
	hide charge1;
	hide charge2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | BITMAP3;
		explode turretbase type SHATTER | BITMAP2;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode charge1 type BITMAPONLY | BITMAP4;
		explode charge1 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode turret1 type SHATTER | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP4;
		explode turretbase type SHATTER | BITMAP3;
		explode charge1 type BITMAPONLY | BITMAP4;
		explode charge2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turretbase type SHATTER | BITMAP1;
		explode charge1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode charge2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode turret1 type BITMAPONLY | BITMAP4;
	explode turret2 type SHATTER | BITMAP3;
	explode turretbase type BITMAPONLY | BITMAP4;
	explode charge1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode charge2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
