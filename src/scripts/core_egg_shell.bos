#include "constants.h"

piece  base, leftshield, rightshield, wheel1, wheel2, wheel3, wheel4, supportrod1,
       left1, left2, right1, right2, plateform1, plateleft1, plateleft2,
       topplateform, turret, barrel, flare;

static-var  bOpen, bStayOpen, Static_Var_2, restore_delay, bMoving, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_RESTORE			4


lua_FlameShot(weapon)
{
  return 0;
}

wheels()
{
	if( TRUE )
	{
		turn base to x-axis <0.500000> speed <11.593407>;
		turn base to y-axis <0.500000> speed <11.593407>;
		turn base to z-axis <0.500000> speed <11.593407>;
		turn wheel1 to x-axis <45.000000> speed <66.593407>;
		turn wheel2 to x-axis <45.000000> speed <66.593407>;
		turn wheel3 to x-axis <45.000000> speed <66.593407>;
		turn wheel4 to x-axis <45.000000> speed <66.593407>;
		wait-for-turn wheel4 around x-axis;
	}
	if( TRUE )
	{
		turn base to x-axis <-0.500000> speed <11.593407>;
		turn base to y-axis <0.500000> speed <11.593407>;
		turn base to z-axis <0.500000> speed <11.593407>;
		turn wheel1 to x-axis <90.000000> speed <66.593407>;
		turn wheel2 to x-axis <90.000000> speed <66.593407>;
		turn wheel3 to x-axis <90.000000> speed <66.593407>;
		turn wheel4 to x-axis <90.000000> speed <66.593407>;
		wait-for-turn wheel4 around x-axis;
	}
	if( TRUE )
	{
		turn base to x-axis <0.500000> speed <11.593407>;
		turn base to y-axis <-0.500000> speed <11.593407>;
		turn base to z-axis <-0.500000> speed <11.593407>;
		turn wheel1 to x-axis <135.000000> speed <66.593407>;
		turn wheel2 to x-axis <135.000000> speed <66.593407>;
		turn wheel3 to x-axis <135.000000> speed <66.593407>;
		turn wheel4 to x-axis <135.000000> speed <66.593407>;
		wait-for-turn wheel4 around x-axis;
	}
	if( TRUE )
	{
		turn base to x-axis <-0.500000> speed <11.593407>;
		turn base to y-axis <0.500000> speed <11.593407>;
		turn base to z-axis <-0.500000> speed <11.593407>;
		turn wheel1 to x-axis <180.000000> speed <66.593407>;
		turn wheel2 to x-axis <180.000000> speed <66.593407>;
		turn wheel3 to x-axis <180.000000> speed <66.593407>;
		turn wheel4 to x-axis <180.000000> speed <66.593407>;
		wait-for-turn wheel4 around x-axis;
	}
	if( TRUE )
	{
		turn base to x-axis <-0.500000> speed <11.593407>;
		turn base to y-axis <-0.500000> speed <11.593407>;
		turn base to z-axis <0.500000> speed <11.593407>;
		turn wheel1 to x-axis <235.000000> speed <66.593407>;
		turn wheel2 to x-axis <235.000000> speed <66.593407>;
		turn wheel3 to x-axis <235.000000> speed <66.593407>;
		turn wheel4 to x-axis <235.000000> speed <66.593407>;
		wait-for-turn wheel4 around x-axis;
	}
	if( TRUE )
	{
		turn base to x-axis <3.000000> speed <11.593407>;
		turn base to y-axis <-3.000000> speed <11.593407>;
		turn base to z-axis <3.000000> speed <11.593407>;
		turn wheel1 to x-axis <270.000000> speed <66.593407>;
		turn wheel2 to x-axis <270.000000> speed <66.593407>;
		turn wheel3 to x-axis <270.000000> speed <66.593407>;
		turn wheel4 to x-axis <270.000000> speed <66.593407>;
		wait-for-turn wheel4 around x-axis;
	}
	if( TRUE )
	{
		turn base to x-axis <0.500000> speed <11.593407>;
		turn base to y-axis <-0.500000> speed <11.593407>;
		turn base to z-axis <-0.500000> speed <11.593407>;
		turn wheel1 to x-axis <315.000000> speed <66.593407>;
		turn wheel2 to x-axis <315.000000> speed <66.593407>;
		turn wheel3 to x-axis <315.000000> speed <66.593407>;
		turn wheel4 to x-axis <315.000000> speed <66.593407>;
		wait-for-turn wheel4 around x-axis;
	}
	if( TRUE )
	{
		turn base to x-axis <0.000000> speed <11.593407>;
		turn base to y-axis <0.000000> speed <11.593407>;
		turn base to z-axis <0.000000> speed <11.593407>;
		turn wheel1 to x-axis <360.000000> speed <66.593407>;
		turn wheel2 to x-axis <360.000000> speed <66.593407>;
		turn wheel3 to x-axis <360.000000> speed <66.593407>;
		turn wheel4 to x-axis <360.000000> speed <66.593407>;
		wait-for-turn wheel4 around x-axis;
	}
}

freeze()
{
	turn base to x-axis <0.000000> speed <1.593407>;
	turn base to y-axis <0.000000> speed <1.593407>;
	turn base to z-axis <0.000000> speed <1.593407>;
	turn wheel1 to x-axis <0.000000> speed <66.593407>;
	turn wheel2 to x-axis <0.000000> speed <66.593407>;
	turn wheel3 to x-axis <0.000000> speed <66.593407>;
	turn wheel4 to x-axis <0.000000> speed <66.593407>;
	wait-for-turn wheel4 around x-axis;
	sleep 500;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		if( moving )
		{
			Static_Var_2 = 1;
			call-script wheels();
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_2 = 1;
			if( justmoved )
			{
				call-script freeze();
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/////////////////////////////////////////////////
Go()
{
	move plateform1 to y-axis [3.939990] speed [40.000000];
	move right1 to x-axis [3.108002] speed [40.000000];
	move right2 to x-axis [3.108002] speed [40.000000];
	move left1 to x-axis [-3.108002] speed [40.000000];
	move left2 to x-axis [-3.108002] speed [40.000000];
	move rightshield to x-axis [2.775000] speed [40.000000];
	move leftshield to x-axis [-2.775000] speed [40.000000];
	wait-for-move plateform1 along y-axis;
	wait-for-move right1 along x-axis;
	wait-for-move rightshield along x-axis;
	set ARMORED to 0;
	bOpen = 1;
}

Stop()
{
	turn turret to x-axis <0.000000> speed <250>;
	turn topplateform to y-axis <0.000000> speed <250>;
	wait-for-turn topplateform around y-axis;
	wait-for-turn turret around x-axis;
	sleep 100;
	move plateform1 to y-axis [0.000000] speed [30.000000];
	move right1 to x-axis [0.000000] speed [30.000000];
	move right2 to x-axis [0.000000] speed [30.000000];
	move left1 to x-axis [0.000000] speed [30.000000];
	move left2 to x-axis [0.000000] speed [30.000000];
	move rightshield to x-axis [0.000000] speed [30.000000];
	move leftshield to x-axis [0.000000] speed [30.000000];
	wait-for-move plateform1 along y-axis;
	wait-for-move right1 along x-axis;
	wait-for-move rightshield along x-axis;
	bOpen = 0;
	sleep 39;
	set ARMORED to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Activate()
{
	bStayOpen = TRUE;
	start-script RequestState(0);
}

Deactivate()
{
	bStayOpen = FALSE;
	start-script RequestState(1);
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	
	set-signal-mask 0;
	if (bOpen && !bStayOpen)
	{
		start-script RequestState(1);
	}
	
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 1.2;
}

Create()
{	
		
	hide flare;
	
	bOpen = FALSE;
	bStayOpen = FALSE;
	set ARMORED to TRUE;
	
	restore_delay = 300;	
	call-script InitState();
	

	start-script RequestState(1);
	
	start-script SmokeUnit();
	start-script MotionControl();
	
	set-signal-mask SIG_AIM;
	set-signal-mask SIG_RESTORE;
}
///

AimPrimary(heading, pitch)
{		

	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !bOpen)
	{
		sleep 250;
	}
	turn topplateform to y-axis heading speed <200.016484>;
	turn turret to x-axis <0.000000> - pitch speed <250>;
	wait-for-turn topplateform around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();	
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = topplateform;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

//FirePrimary()
//{
	//show flare;
	//move turret to z-axis [-1.000000] speed [25.000000];
	//sleep 100;
	//hide flare;
	//move turret to z-axis [0.000000] speed [0.750000];
//}


Shot1()
{
	call-script lua_FlameShot(1);
	return (TRUE);

}



SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP2;
		explode right2 type FALL | BITMAP3;
		explode left2 type FALL | BITMAP4;
		explode leftshield type FALL | BITMAP1;
		explode rightshield type FALL | BITMAP2;
		explode barrel type FALL | BITMAP3;
		explode supportrod1 type FALL | BITMAP4;
		explode right1 type FALL | BITMAP5;
		explode left1 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type BITMAPONLY | BITMAP2;
		explode right2 type FALL | BITMAP3;
		explode left2 type FALL | BITMAP4;
		explode leftshield type FALL | BITMAP1;
		explode rightshield type FALL | BITMAP2;
		explode barrel type FALL | BITMAP3;
		explode supportrod1 type FALL | BITMAP4;
		explode right1 type FALL | BITMAP5;
		explode left1 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leftshield type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode right1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode left2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rightshield type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wheel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leftshield type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wheel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rightshield type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode left1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode right1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
