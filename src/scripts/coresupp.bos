#define TA			// This is a TA script

#include "constants.h"

piece  base, hull, gunf, barrelfl, flarefl, barrelfr, flarefr, gunb, barrelbl, flarebl, barrelbr, flarebr, wake1, wake2;

static-var  gun_1, gun_2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8

#define RESTORE_DELAY		3000

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	turn gunb to y-axis <-180> now;
	start-script SmokeUnit();
	return (0);
}

RestoreAfterDelay()
{
	sleep RESTORE_DELAY;
	turn gunf to y-axis <0.> speed <90>;
	turn gunb to y-axis <-180> speed <90>;
	turn barrelfr to x-axis <0> speed <50>;
	turn barrelfl to x-axis <0> speed <50>;
	turn barrelbr to x-axis <0> speed <50>;
	turn barrelbl to x-axis <0> speed <50>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn gunf to y-axis heading speed <270>;
	turn barrelfr to x-axis <0.> - pitch speed <150>;
	turn barrelfl to x-axis <0.> - pitch speed <150>;
	wait-for-turn gunf around y-axis;
	wait-for-turn barrelfr around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	gun_1 = !gun_1;
	if (gun_1)
	{
		emit-sfx 1024 from flarefr;
	} else {
		emit-sfx 1024 from flarefl;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = gunf;
	return (0);
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn gunb to y-axis heading speed <270>;
	turn barrelbr to x-axis <0.> - pitch speed <150>;
	turn barrelbl to x-axis <0.> - pitch speed <150>;
	wait-for-turn gunb around y-axis;
	wait-for-turn barrelbr around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	gun_2 = !gun_2;
	if (gun_2)
	{
		emit-sfx 1024 from flarebr;
	} else {
		emit-sfx 1024 from flarebl;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = gunb;
	return (0);
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flarefl;
	}
	if( gun_1 == 1 )
	{
		piecenum = flarefr;
	}
	return (0);
}

QueryWeapon2(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flarebl;
	}
	if( gun_2 == 1 )
	{
		piecenum = flarebr;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hull type BITMAPONLY | BITMAP1;
		explode gunf type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode gunb type BITMAPONLY | BITMAP4;
		explode barrelfr type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hull type BITMAPONLY | BITMAP1;
		explode gunf type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode gunb type FALL | BITMAP4;
		explode barrelbr type FALL | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode hull type SHATTER | BITMAP1;
		explode gunf type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode gunb type FALL | BITMAP4;
		explode barrelbr type FALL | BITMAP2;
		explode barrelfr type FALL | BITMAP2;
		explode barrelfl type FALL | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
		explode hull type SHATTER | BITMAP1;
		explode gunf type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode gunb type FALL | BITMAP4;
		explode barrelbr type FALL | BITMAP2;
		explode barrelfr type FALL | BITMAP2;
		explode barrelfl type FALL | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
	return (0);
}
