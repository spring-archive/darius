#define TA			// This is a TA script

#include "constants.h"

piece  base, body, lw, rw, lc, flare2, rc, flare1,
       bombay;

static-var  gun_2, Static_Var_2;

// Signal definitions
#define SIG_AIM_2			2

#define FUEL_USE_DELAY		300

StartMoving()
{
	
		move lw to x-axis [-2.000000] speed [7.000000];
		move rw to x-axis [2.000000] speed [7.000000];
		move lw to y-axis [-1.000000] speed [7.000000];
		move rw to y-axis [-1.000000] speed [7.000000];
		move lw to z-axis [-2.000000] speed [7.000000];
		move rw to z-axis [-2.000000] speed [7.000000];
		sleep 998;
		return (0);
}

StopMoving()
{
		move lw to x-axis [0.000000] speed [7.000000];
		move rw to x-axis [0.000000] speed [7.000000];
		move lw to y-axis [0.000000] speed [7.000000];
		move rw to y-axis [0.000000] speed [7.000000];
		move lw to z-axis [0.000000] speed [7.000000];
		move rw to z-axis [0.000000] speed [7.000000];
		sleep 998;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	gun_2 = base;
	Static_Var_2 = 2000;
	hide flare1;
	hide flare2;
	start-script SmokeUnit();
	
	return (0);
}


RestoreAfterDelay()
{
	sleep Static_Var_2;
	turn lc to z-axis <0.000000> speed <300.000000>;
	turn rc to z-axis <0.000000> speed <300.000000>;
	return (0);
}

FirePrimary() {
	sleep FUEL_USE_DELAY;
	set CURRENT_FUEL to 0;
}

QueryPrimary(piecenum)
{
	piecenum = bombay;
	return (0);
}



AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn lc to z-axis <-180.000000> speed <300.000000>;
	turn rc to z-axis <180.000000> speed <300.000000>;
	start-script RestoreAfterDelay();
	return (1);
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare2;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = lc;
	}
	if( gun_2 == 1 )
	{
		piecenum = rc;
	}
	return (0);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	if( gun_2 == 1 )
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	gun_2 = !gun_2;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode lw type BITMAPONLY | BITMAP3;
		explode rw type BITMAPONLY | BITMAP4;
		explode lc type BITMAPONLY | BITMAP5;
		explode rc type BITMAPONLY | BITMAP1;
		explode bombay type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type SHATTER | BITMAP1;
		explode body type SHATTER | BITMAP2;
		explode lw type SHATTER | BITMAP3;
		explode rw type SHATTER | BITMAP4;
		explode lc type SHATTER | BITMAP5;
		explode rc type SHATTER | BITMAP1;
		explode bombay type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bombay type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 2;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bombay type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
