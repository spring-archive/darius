#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, arm_1, arm_2, arm_3, nanobase, centre, rightpiece, leftpiece, nanoemit, pad;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging, Static_Var_5;

// Signal definitions
#define SIG_ACTIVATE			2

lua_QueryNanoPiece() 
{
  return 0;
}

activatescr()
{
	if( TRUE )
	{
		turn leftpiece to z-axis <90> speed <60>;
		turn rightpiece to z-axis <-90> speed <60>;
		turn centre to x-axis <-90> speed <60>;
		sleep 500;
	}
	if( TRUE )
	{
		move leftpiece to x-axis [5] speed [10];
		move rightpiece to x-axis [-5] speed [10];
		turn arm_1 to x-axis <-85> speed <100>;
		turn arm_2 to x-axis <170> speed <200>;
		turn arm_3 to x-axis <-60> speed <90>;
		turn nanobase to x-axis <5> speed <50>;
		sleep 500;
	}
	sleep 29;
}

deactivatescr()
{
	if( TRUE )
	{
		turn leftpiece to z-axis <0> speed <30>;
		turn rightpiece to z-axis <0> speed <30>;
		turn centre to x-axis <0> speed <30>;
		sleep 500;
	}
	if( TRUE )
	{
		move leftpiece to x-axis [0] speed [5];
		move rightpiece to x-axis [0] speed [5];
		turn arm_1 to x-axis <0.000000> speed <50>;
		turn arm_2 to x-axis <0.000000> speed <40>;
		turn arm_3 to x-axis <0.000000> speed <30>;
		turn nanobase to x-axis <0.000000> speed <10>;
		sleep 500;
	}
	sleep 29;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	spray = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	piecenum = nanoemit;
	call-script lua_QueryNanoPiece(piecenum);
}


Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	Static_Var_5 = 1;
}

StopBuilding()
{
	Static_Var_5 = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		return (0);
	}
	corpsetype = 3;
}
