#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, torso, powerbox, cable, head, plasArm, lasArm, cannon,
       laser, cbarrel, lbarrel, cemit, lemit, Lleg, Rleg, lowerLleg,
       lowerRleg, Lfoot, Rfoot, rfire, Flash3, ejector, ground;

static-var  restore_delay, bMoving, bAiming, Static_Var_4;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


walk()
{
	if( TRUE )
	{
		move torso to y-axis [0.000000] now;
		turn Rleg to x-axis <0.000000> now;
		turn lowerRleg to x-axis <0.000000> now;
		turn Rfoot to x-axis <0.000000> now;
		turn Lleg to x-axis <0.000000> now;
		turn lowerLleg to x-axis <0.000000> now;
		turn Lfoot to x-axis <0.000000> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [0.300000] now;
		turn Rleg to x-axis <-10.000000> now;
		turn lowerRleg to x-axis <-20.000000> now;
		turn Rfoot to x-axis <20.000000> now;
		turn Lleg to x-axis <10.000000> now;
		turn lowerLleg to x-axis <20.000000> now;
		turn Lfoot to x-axis <-20.000000> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [0.700000] now;
		turn Rleg to x-axis <-20.000000> now;
		turn lowerRleg to x-axis <-30.005495> now;
		turn Rfoot to x-axis <30.005495> now;
		turn lowerLleg to x-axis <20.000000> now;
		turn Lfoot to x-axis <-20.000000> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [0.300000] now;
		turn Rleg to x-axis <-30.005495> now;
		turn lowerRleg to x-axis <-20.000000> now;
		turn Rfoot to x-axis <40.005495> now;
		turn lowerLleg to x-axis <30.005495> now;
		turn Lfoot to x-axis <-30.005495> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [0.000000] now;
		turn Rleg to x-axis <-20.000000> now;
		turn lowerRleg to x-axis <-10.000000> now;
		turn Rfoot to x-axis <30.005495> now;
		turn lowerLleg to x-axis <40.005495> now;
		turn Lfoot to x-axis <-40.005495> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.100000] now;
		turn Rleg to x-axis <0.000000> now;
		turn lowerRleg to x-axis <0.000000> now;
		turn Rfoot to x-axis <0.000000> now;
		turn Lleg to x-axis <0.000000> now;
		turn lowerLleg to x-axis <0.000000> now;
		turn Lfoot to x-axis <0.000000> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.200000] now;
		turn Rleg to x-axis <10.000000> now;
		turn lowerRleg to x-axis <20.000000> now;
		turn Rfoot to x-axis <-20.000000> now;
		turn Lleg to x-axis <-10.000000> now;
		turn lowerLleg to x-axis <-20.000000> now;
		turn Lfoot to x-axis <20.000000> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.300000] now;
		turn lowerRleg to x-axis <20.000000> now;
		turn Rfoot to x-axis <-20.000000> now;
		turn Lleg to x-axis <-20.000000> now;
		turn lowerLleg to x-axis <-30.005495> now;
		turn Lfoot to x-axis <30.005495> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.400000] now;
		turn lowerRleg to x-axis <30.005495> now;
		turn Rfoot to x-axis <-30.005495> now;
		turn Lleg to x-axis <-30.005495> now;
		turn lowerLleg to x-axis <-20.000000> now;
		turn Lfoot to x-axis <40.005495> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.500000] now;
		turn lowerRleg to x-axis <40.005495> now;
		turn Rfoot to x-axis <-40.005495> now;
		turn Lleg to x-axis <-20.000000> now;
		turn lowerLleg to x-axis <-10.000000> now;
		turn Lfoot to x-axis <30.005495> now;
		sleep 67;
	}
	if( TRUE )
	{
		move torso to y-axis [0.000000] now;
		turn lowerRleg to x-axis <0.000000> speed <200.000000>;
		turn Rleg to x-axis <0.000000> speed <200.000000>;
		turn Rfoot to x-axis <0.000000> speed <200.000000>;
		turn Lleg to x-axis <0.000000> now;
		turn lowerLleg to x-axis <0.000000> now;
		turn Lfoot to x-axis <0.000000> now;
		sleep 67;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_4 = 1;
				call-script walk();
			}
			if( !aiming )
			{
				Static_Var_4 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_4 = 1;
			if( justmoved )
			{
				move torso to y-axis [0.000000] now;
				turn Rleg to x-axis <0.000000> speed <300.000000>;
				turn Lleg to x-axis <0.000000> speed <300.000000>;
				turn lowerRleg to x-axis <0.000000> speed <300.000000>;
				turn lowerLleg to x-axis <0.000000> speed <300.000000>;
				turn Rfoot to x-axis <0.000000> speed <300.000000>;
				turn Lfoot to x-axis <0.000000> speed <300.000000>;
				if( !aiming )
				{
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	hide Flash3;
	hide ground;
	hide rfire;
	hide cemit;
	hide lemit;
	hide ejector;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_4 = 1;
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script MotionControl();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn torso to y-axis <0.000000> speed <90.000000>;
	turn plasArm to x-axis <0.000000> speed <90.000000>;
	turn lasArm to x-axis <0.000000> speed <90.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn plasArm around x-axis;
	wait-for-turn lasArm around x-axis;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_4 )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <400.000000>;
	turn lasArm to x-axis <0.000000> - pitch speed <400.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn lasArm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	while( !Static_Var_4 )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <400.000000>;
	turn plasArm to x-axis <0.000000> - pitch speed <400.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn plasArm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1027 from lemit;
}

FireSecondary()
{
	emit-sfx 1024 from cemit;
	emit-sfx 1025 from cemit;
	emit-sfx 1026 from ejector;
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = lemit;
}

QuerySecondary(piecenum)
{
	piecenum = cemit;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimFromSecondary(piecenum)
{
	piecenum = torso;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode torso type BITMAPONLY | BITMAP2;
		explode powerbox type BITMAPONLY | BITMAP3;
		explode cable type BITMAPONLY | BITMAP4;
		explode head type BITMAPONLY | BITMAP4;
		explode plasArm type BITMAPONLY | BITMAP3;
		explode lasArm type BITMAPONLY | BITMAP3;
		explode cannon type BITMAPONLY | BITMAP3;
		explode laser type BITMAPONLY | BITMAP4;
		explode cbarrel type BITMAPONLY | BITMAP3;
		explode lbarrel type BITMAPONLY | BITMAP3;
		explode Rleg type BITMAPONLY | BITMAP2;
		explode Lleg type BITMAPONLY | BITMAP2;
		explode lowerRleg type BITMAPONLY | BITMAP3;
		explode lowerLleg type BITMAPONLY | BITMAP3;
		explode Rfoot type BITMAPONLY | BITMAP4;
		explode Lfoot type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode torso type BITMAPONLY | BITMAP2;
		explode powerbox type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode cable type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode head type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode plasArm type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode lasArm type BITMAPONLY | BITMAP3;
		explode cannon type BITMAPONLY | BITMAP3;
		explode laser type BITMAPONLY | BITMAP4;
		explode cbarrel type BITMAPONLY | BITMAP3;
		explode lbarrel type BITMAPONLY | BITMAP3;
		explode Rleg type BITMAPONLY | BITMAP2;
		explode Lleg type BITMAPONLY | BITMAP2;
		explode lowerRleg type BITMAPONLY | BITMAP3;
		explode lowerLleg type BITMAPONLY | BITMAP3;
		explode Rfoot type BITMAPONLY | BITMAP4;
		explode Lfoot type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode torso type BITMAPONLY | BITMAP2;
		explode powerbox type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode cable type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode head type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode plasArm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lasArm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode cannon type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode laser type BITMAPONLY | BITMAP4;
		explode cbarrel type BITMAPONLY | BITMAP3;
		explode lbarrel type BITMAPONLY | BITMAP3;
		explode Rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode Lleg type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lowerRleg type BITMAPONLY | BITMAP3;
		explode lowerLleg type BITMAPONLY | BITMAP3;
		explode Rfoot type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Lfoot type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode torso type BITMAPONLY | BITMAP2;
	explode powerbox type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode cable type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode head type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode plasArm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lasArm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode cannon type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode laser type BITMAPONLY | BITMAP4;
	explode cbarrel type BITMAPONLY | BITMAP3;
	explode lbarrel type BITMAPONLY | BITMAP3;
	explode Rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode Lleg type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lowerRleg type BITMAPONLY | BITMAP3;
	explode lowerLleg type BITMAPONLY | BITMAP3;
	explode Rfoot type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode Lfoot type BITMAPONLY | BITMAP4;
}
