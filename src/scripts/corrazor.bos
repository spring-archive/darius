#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, hinge1, hinge2, turret, launcher, firep1,
       firep2;

static-var  Static_Var_1, restore_delay, gun_1, statechg_DesiredState, statechg_StateChanging, gh;

// Signal definitions
#define SIG_AIM				2


Activatescr()
{
	if( gh )
	{
		turn door1 to z-axis <0.000000> speed <260.000000>;
		turn door2 to z-axis <0.000000> speed <260.000000>;
		move turret to y-axis [0.000000] speed [30.000000];
		sleep 400;
	} else {
		turn base to x-axis 0 speed <225>;
	}
	sleep 25;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Deactivatescr()
{
	if( gh )
	{
		turn launcher to x-axis <0.0> speed <80.000000>;
		turn launcher to y-axis <0.0> speed <100.000000>;
		move turret to y-axis [-8.000000] speed [10.000000];
		wait-for-move turret along y-axis;
		turn door1 to z-axis <-150.000000> speed <100.000000>;
		turn door2 to z-axis <150.000000> speed <100.000000>;
		sleep 300;
	} else {
		turn base to x-axis <180> speed <225>;
	}
	sleep 15;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	if( !Static_Var_1 )
	{
		call-script Activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	cache door1;
	cache door2;
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script Deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	gh = GET GROUND_HEIGHT(GET UNIT_XZ);
	if (gh) {
	} else {
		hide door1;
		hide door2;
		hide hinge1;
		hide hinge2;
	}
	Static_Var_1 = 1;
	gun_1 = door1;
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script InitState();
	start-script RequestState(0);
	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <450.000000>;
	turn launcher to x-axis <0.000000> - pitch speed <120.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = !gun_1;
	if( gun_1 )
	{
		emit-sfx 1024 from firep1;
	}
	else
	{
		emit-sfx 1024 from firep2;
	}
	
}

AimFromPrimary(piecenum)
{
	piecenum = launcher;
}

QueryPrimary(piecenum)
{
	if( gun_1 )
	{
		piecenum = firep1;
	}
	else
	{
		piecenum = firep2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		if( Static_Var_1 )
		{
			explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		}
		if( !Static_Var_1 )
		{
			explode launcher type BITMAPONLY | BITMAP5;
		}
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 4;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP3;
}
