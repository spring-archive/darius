//By Chris Mackey

#include "constants.h"

piece base, turret, lever, pod, l_poddoor, r_poddoor,
//reloading bay
base2, door, doorpist, arm, hand,
//missiles, missile doors, exhaust points, indicator lights
m_1, m_2, m_3, d_1, d_2, d_3, ex_1, ex_2, ex_3, lt_1g, lt_2g, lt_3g, lt_1r, lt_2r, lt_3r;

static-var ammo, missile, missilespeed, mfront, mbelow;

#define sigaim      2

Create()
{
	//start-script SmokeUnit();
	//initialize variables
	ammo = 3;
	missile = 1;
	missilespeed = [500];
	mfront = [10];
	mbelow = [-10];
	turn ex_1 to x-axis <170> now;
	turn ex_2 to x-axis <170> now;
	turn ex_3 to x-axis <170> now;
	//hide lt_1r;
	//hide lt_2r;
	//hide lt_3r;
	//hide lt_1g;
	//hide lt_2g;
	//hide lt_3g;
	hide door;
	hide doorpist; 
	hide arm; 
	hide hand; 
	hide base2;
	move l_poddoor to x-axis [-1.8] speed [5];
	move r_poddoor to x-axis [1.8] speed [5];
}

Reload1()
{
		move m_1 to z-axis [-1] now;
		sleep 7500;
		move l_poddoor to x-axis [0] speed [5];
		move r_poddoor to x-axis [0] speed [5];
		sleep 500;
		show m_1;
		show lt_1g;
		//hide lt_1r;
		move m_1 to z-axis [0] speed [1];
		sleep 2500;
		sleep 500;
		ammo = ammo+1;
}
Reload2()
{
		move m_2 to z-axis [-1] now;
		sleep 8000;
		show m_2;
		show lt_2g;
		//hide lt_2r;
		move m_2 to z-axis [0] speed [1];
		sleep 2500;
		sleep 500;
		ammo = ammo+1;
}
Reload3()
{
		move m_3 to z-axis [-1] now;
		sleep 8000;
		show m_3;
		show lt_3g;
		//hide lt_3r;
		move m_3 to z-axis [0] speed [1];
		sleep 500;
		move l_poddoor to x-axis [-1.8] speed [5];
		move r_poddoor to x-axis [1.8] speed [5];
		sleep 2500;
		ammo = ammo+1;
}

AimFromPrimary(piecenum)
{
	piecenum = pod;
}

QueryPrimary(piecenum)
{
	if( missile == 1 )
	{
		piecenum = m_1;
	}
	else if( missile == 2 )
	{
		piecenum = m_2;
	}
	else if( missile == 3 )
	{
		piecenum = m_3;
	}
}

AimPrimary(heading, pitch)
{
	if( ammo >= 1 )
	{
		signal sigaim;
		set-signal-mask sigaim;
		turn turret to y-axis heading speed <450>; // left-right
		turn pod to x-axis <0> - pitch speed <450>; //up-down
		wait-for-turn turret around y-axis;
		wait-for-turn turret around x-axis;
		return (1);
	}
	else
	{
		sleep 100;
	}
}

FirePrimary()
{
	if( missile == 1 )
	{
		move m_1 to z-axis mfront speed missilespeed;
		//show lt_1r;
		hide lt_1g;
		emit-sfx 1025 from ex_1;
		turn d_1 to x-axis <100> speed <1000>;
		turn lever to x-axis <-5> speed <80>;
		turn pod to x-axis <7> speed <70>;
		wait-for-move m_1 along z-axis;
		turn lever to x-axis <0> speed <50>;
		turn pod to x-axis <0> speed <50>;
		turn d_1 to x-axis <0> speed <100>;
		missile = 2;
		hide m_1;
		start-script Reload1();
	}
	else if( missile == 2 )
	{
		move m_2 to z-axis mfront speed missilespeed;
		//show lt_2r;
		hide lt_2g;
		emit-sfx 1025 from ex_2;
		turn d_2 to x-axis <100> speed <1000>;
		turn lever to x-axis <-5> speed <80>;
		turn pod to x-axis <7> speed <70>;
		wait-for-move m_2 along z-axis;
		turn lever to x-axis <0> speed <50>;
		turn pod to x-axis <0> speed <50>;
		turn d_2 to x-axis <0> speed <100>;
		missile = 3;
		hide m_2;
		start-script Reload2();
	}
	else if( missile == 3 )
	{
		move m_3 to z-axis mfront speed missilespeed;
		//show lt_3r;
		hide lt_3g;
		emit-sfx 1025 from ex_3;
		turn d_3 to x-axis <100> speed <1000>;
		turn lever to x-axis <-5> speed <80>;
		turn pod to x-axis <7> speed <70>;
		missile = 1;
		wait-for-move m_3 along z-axis;
		turn lever to x-axis <0> speed <50>;
		turn pod to x-axis <0> speed <50>;
		turn d_3 to x-axis <0> speed <100>;
		hide m_3;
		start-script Reload3();
	}
	--ammo;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | BITMAP1;
		explode lever type BITMAPONLY | BITMAP2;
		//explode door type BITMAPONLY | BITMAP3;
		explode pod type BITMAPONLY | BITMAP4;
		explode m_1 type BITMAPONLY | EXPLODE_ON_HIT | SMOKE | BITMAP5;
		explode m_2 type BITMAPONLY | EXPLODE_ON_HIT | SMOKE | BITMAP1;
		explode m_3 type BITMAPONLY | EXPLODE_ON_HIT | SMOKE | BITMAP2;
		explode d_1 type BITMAPONLY | BITMAP1;
		explode d_2 type BITMAPONLY | BITMAP1;
		explode d_3 type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode lever type FALL | BITMAP2;
		//explode door type FALL | BITMAP3;
		explode pod type FALL | BITMAP4;
		explode m_1 type FALL | EXPLODE_ON_HIT | SMOKE | BITMAP3;
		explode m_2 type FALL | EXPLODE_ON_HIT | SMOKE | BITMAP1;
		explode m_3 type FALL | EXPLODE_ON_HIT | SMOKE | BITMAP2;
		explode d_1 type BITMAPONLY | BITMAP1;
		explode d_2 type BITMAPONLY | BITMAP1;
		explode d_3 type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP1;
		explode lever type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode door type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pod type SHATTER | BITMAP4;
		explode m_1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode m_2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode m_3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode d_1 type BITMAPONLY | EXPLODE_ON_HIT | BITMAP1;
		explode d_2 type BITMAPONLY | EXPLODE_ON_HIT | BITMAP1;
		explode d_3 type BITMAPONLY | EXPLODE_ON_HIT | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP1;
	explode lever type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	//explode door type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pod type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode m_1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode m_2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode m_3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type BITMAPONLY | BITMAP3;
}