//linear constant = 65536

#include "constants.h"

piece hull, neck, turret, arml, armr, flare1, flare2, flare3, flare4, missile1, missile2, missile3, missile4;
piece exhaust1, exhaust2, exhaust3, exhaust4, wakel, waker, exp1, exp2, exp3, exp4;

static-var  gun1, restore_delay, gun_1_yaw;

// Signal definitions
#define SIG_MOVE			8

//rockz
#define ROCK_PIECE				hull	//piece to rock
#define ROCK_Z_SPEED			3		//number of quarter-cycles per second around z-axis
#define ROCK_Z_DECAY			-1/2	//rocking around z-axis is reduced by this factor each time; should be negative to alternate rocking direction
#define ROCK_Z_MIN              <0.5>	//if around z-axis rock is not greater than this amount rocking will stop after returning to center
#define SIG_ROCK_Z				16		//signal to prevent multiple rocking
#include "rockz.h"

#define ROCK_Z_FIRE_1			-5

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun1 = 0;
	restore_delay = 3000;
	call-script RockZInit();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <35.000000>;
	turn arml to x-axis <0.000000> speed <20.000000>;
	turn armr to x-axis <0.000000> speed <20.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wakel;
		emit-sfx 4 from waker;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimWeapon1(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <70.000000>;
	turn arml to x-axis <0.000000> - pitch speed <40.000000>;
	turn armr to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn arml around x-axis;
	wait-for-turn armr around x-axis;
	start-script RestoreAfterDelay();
	gun_1_yaw = heading;
	return (1);
}

/*
AimWeapon2(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	start-script RestoreAfterDelay();
	return (1);
}
*/

FireWeapon1()
{
	start-script RockZ(ROCK_Z_FIRE_1, gun_1_yaw);
	
	if( gun1 == 0 )
	{
		move missile1 to z-axis [-4.000000] speed [500.000000];
		sleep 1500;
		move missile1 to z-axis [0.000000] speed [3.000000];
	}
	if( gun1 == 1 )
	{
		move missile2 to z-axis [-4.000000] speed [500.000000];
		sleep 1500;
		move missile2 to z-axis [0.000000] speed [3.000000];
	}
	if( gun1 == 2 )
	{
		move missile3 to z-axis [-4.000000] speed [500.000000];
		sleep 1500;
		move missile3 to z-axis [0.000000] speed [3.000000];
	}
	if( gun1 == 3 )
	{
		move missile4 to z-axis [-4.000000] speed [500.000000];
		sleep 1500;
		move missile4 to z-axis [0.000000] speed [3.000000];
	}

	gun1 = gun1 + 1;
	if(gun1 == 4)
		{ gun1 = 0; }
}

/*
FireWeapon2()
{
	show flareb;
	sleep 150;
	hide flareb;
}
*/


AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

QueryWeapon1(piecenum)
{
	if( gun1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun1 == 1 )
	{
		piecenum = flare2;
	}
	if( gun1 == 2 )
	{
		piecenum = flare3;
	}
	if( gun1 == 3 )
	{
		piecenum = flare4;
	}
}

/*
QueryWeapon2(piecenum)
{
	piecenum = flareb;
}
*/

Killed(severity, corpsetype)
{
/*	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hull type BITMAPONLY;
		explode neck type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode arml type BITMAPONLY;
		explode armr type BITMAPONLY;
		return (0);
	}*/
	if( severity <= 50 )
	{
		corpsetype = 1;
				
		spin hull around x-axis speed <-2>;
		move hull to y-axis [-4] speed [2];
		
		emit-sfx 1025 from exp1;
		sleep 1400;
		emit-sfx 1025 from exp3;
		sleep 600;
		emit-sfx 1025 from exp2;
		sleep 1500;
		emit-sfx 1025 from exp1;
		sleep 1000;
		
		emit-sfx 1024 from hull;
		explode hull type BITMAPONLY;
		explode neck type BITMAPONLY;
		explode turret type SHATTER;
		explode arml type BITMAPONLY;
		explode armr type BITMAPONLY;
		return (0);
	}
/*	if( severity <= 99 )
	{
		corpsetype = 2;
		explode hull type SHATTER;
		explode neck type SHATTER;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode arml type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode armr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (0);
	}*/
	corpsetype = 2;
	explode hull type SHATTER;
	explode neck type SHATTER;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arml type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode armr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
}
