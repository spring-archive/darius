#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, wake01, wake02, wake03, wake04, wake05,
       wake06, wake07, wake08, gun, ground01;

static-var  Static_Var_1, wobble, random;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

#define RESTORE_DELAY		3000

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

WobbleUnit()
{
	while( TRUE )
	{
		if( wobble == TRUE )
		{
			move base to y-axis [0.800000] speed [1.20000];
		}
		if( wobble == FALSE )
		{
			move base to y-axis [-0.800000] speed [1.20000];
		}
		wobble = !wobble;
		sleep 750;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 <= 2 )
		{
			random = Rand( 1, 2 );
			if( random == 1 )
			{
				emit-sfx 5 from wake01;
				emit-sfx 5 from wake03;
				emit-sfx 5 from wake05;
				emit-sfx 5 from wake07;
				emit-sfx 3 from wake01;
			 	emit-sfx 3 from wake03;
			  	emit-sfx 3 from wake05;
			  	emit-sfx 3 from wake07;
			}
			if( random == 2 )
			{
				emit-sfx 5 from wake02;
				emit-sfx 5 from wake04;
				emit-sfx 5 from wake06;
				emit-sfx 5 from wake08;
				emit-sfx 3 from wake02;
			 	emit-sfx 3 from wake04;
			  	emit-sfx 3 from wake06;
			  	emit-sfx 3 from wake08;
			}
		}
		if( Static_Var_1 > 2 )
		{
			emit-sfx 1024+0 from ground01;
		}
		sleep 150;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

Create()
{
	hide flare;
	hide ground01;
	wobble = TRUE;
	start-script SmokeUnit();
	start-script WobbleUnit();
}

RestoreAfterDelay()
{
	sleep RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn gun to x-axis <0.000000> speed <100.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <320.000000>;
	turn gun to x-axis <0.000000> - pitch speed <320.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1025 from flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( Static_Var_1 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode gun type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode flare type FALL | BITMAP3;
			explode turret type SHATTER | BITMAP4;
			return (0);
		}
		corpsetype = 3;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode gun type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode flare type FALL | BITMAP3;
			explode turret type SHATTER | BITMAP4;
			return (0);
		}
		corpsetype = 3;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode gun type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode gun type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
