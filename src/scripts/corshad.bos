#include "constants.h"

piece  fuselage, wingl, wingr, enginel, enginer, finl, finr, bombcent, thrustl, thrustr;

static-var  statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from fuselage;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	turn finl to z-axis <-30> speed <50>;
	turn finr to z-axis <30> speed <50>;
	sleep 50;
	return (1);
}

Stop()
{
	turn finl to z-axis <0> speed <80>;
	turn finr to z-axis <0> speed <80>;
	sleep 50;
	return (1);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

QueryWeapon1(piecenum)
{
	piecenum = bombcent;
}

AimWeapon2()
{
	return (1);
}

QueryWeapon2(piecenum)
{
	piecenum = bombcent;
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode fuselage type BITMAPONLY;
		explode enginel type BITMAPONLY;
		explode enginer type BITMAPONLY;
		explode wingl type BITMAPONLY;
		explode wingr type BITMAPONLY;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode fuselage type BITMAPONLY;
		explode enginel type FALL;
		explode enginer type FALL;
		explode wingl type SHATTER;
		explode wingr type SHATTER;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode fuselage type BITMAPONLY;
		explode enginel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode enginer type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wingl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wingr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (0);
	}
	corpsetype = 2;
	explode fuselage type BITMAPONLY | BITMAP1;
	explode enginel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode enginer type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wingl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wingr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
}
