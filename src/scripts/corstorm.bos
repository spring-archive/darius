// by Chris Mackey

#include "constants.h"

piece base, head, popup, 
l_missile, l_tube, l_door, l_doorslid, 
r_missile, r_tube, r_door, r_doorslid, 
l_thigh, l_leg, l_shin, l_foot, l_toe, lf_toe, lb_toe, 
r_thigh, r_leg, r_shin, r_foot, r_toe, rf_toe, rb_toe;

static-var gun_1;

// signal definitions
#define SIG_MOVE	2
#define SIG_AIM 	4

#define RESTORE_DELAY 1000

walk()
{
	move base to y-axis [3] speed [30];
	while( TRUE )
	{	//part one
		move base to y-axis [3] speed [1];
		turn head to z-axis <6> speed <3>;
		turn head to x-axis <4> speed <5>;
		//right backward
		turn r_thigh to x-axis <10> speed <140>;
		wait-for-turn r_thigh around x-axis;
		turn r_thigh to x-axis <45> speed <100>;
		turn r_leg to x-axis <80> speed <140>;
		turn r_foot to x-axis <-40> speed <140>;
		turn rf_toe to x-axis <-40> speed <180>;
		turn rb_toe to x-axis <-50> speed <180>;
		turn r_toe to z-axis <20> speed <140>;
		//left forward
		turn l_thigh to x-axis <-80> speed <220>;
		turn l_leg to x-axis <120> speed <220>;
		turn l_foot to x-axis <-10> speed <190>;
		turn lf_toe to x-axis <0> speed <180>;
		turn lb_toe to x-axis <0> speed <180>;
		turn l_toe to z-axis <0> speed <140>;
		wait-for-turn l_thigh around x-axis;
		
		//part two
		move base to y-axis [0] speed [1.6];
		turn head to z-axis <-3> speed <3>;
		turn head to x-axis <-7> speed <5>;
		//right back to front
		turn r_leg to x-axis <-10> speed <150>;
		turn r_foot to x-axis <-10> speed <150>;
		turn rf_toe to x-axis <40> speed <180>;
		turn rb_toe to x-axis <-30> speed <180>;
		turn r_toe to z-axis <25> speed <140>;
		//left front to back
		turn l_thigh to x-axis <-10> speed <140>;
		turn l_leg to x-axis <30> speed <160>;
		turn l_foot to x-axis <-15> speed <60>;
		sleep 100;
		
		//part three
		move base to y-axis [3] speed [1];
		turn head to z-axis <5> speed <3>;
		turn head to x-axis <3> speed <5>;
		//left backward
		turn l_thigh to x-axis <10> speed <140>;
		wait-for-turn l_thigh around x-axis;
		turn l_thigh to x-axis <45> speed <100>;
		turn l_leg to x-axis <80> speed <140>;
		turn l_foot to x-axis <-40> speed <140>;
		turn lf_toe to x-axis <-40> speed <180>;
		turn lb_toe to x-axis <-50> speed <180>;
		turn l_toe to z-axis <20> speed <140>;
		//right forward
		turn r_thigh to x-axis <-80> speed <220>;
		turn r_leg to x-axis <120> speed <220>;
		turn r_foot to x-axis <-10> speed <190>;
		turn rf_toe to x-axis <0> speed <180>;
		turn rb_toe to x-axis <0> speed <180>;
		turn r_toe to z-axis <0> speed <140>;
		wait-for-turn r_thigh around x-axis;
		
		//part four
		move base to y-axis [0] speed [1.6];
		turn head to z-axis <-5> speed <8>;
		turn head to x-axis <-3> speed <10>;
		//left back to front
		turn l_leg to x-axis <-10> speed <150>;
		turn l_foot to x-axis <-10> speed <150>;
		turn lf_toe to x-axis <40> speed <180>;
		turn lb_toe to x-axis <-30> speed <180>;
		turn l_toe to z-axis <25> speed <140>;
		// right front to back
		turn r_thigh to x-axis <-10> speed <140>;
		turn r_leg to x-axis <30> speed <160>;
		turn r_foot to x-axis <-15> speed <60>;
		sleep 100;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from head;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	call-script walk();
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	//move all the pieces to their original spots
	turn r_thigh to x-axis <30> speed <200>;
	turn r_leg to x-axis <0> speed <200>;
	turn r_foot to x-axis <0> speed <200>;
	turn r_toe to z-axis <0> speed <200>;
	turn rf_toe to x-axis <0> speed <200>;
	turn rb_toe to x-axis <0> speed <200>;
	
	turn l_thigh to x-axis <30> speed <200>;
	turn l_leg to x-axis <0> speed <200>;
	turn l_foot to x-axis <0> speed <200>;
	turn l_toe to z-axis <0> speed <200>;
	turn lf_toe to x-axis <0> speed <200>;
	turn lb_toe to x-axis <0> speed <200>;
	
	move base to y-axis [0] speed [10];
	turn head to z-axis <0> speed <200>;
	turn head to x-axis <0> speed <200>;
}

Create()
{
	//gun_1 = torso;
	start-script StopMoving();
	start-script SmokeUnit();
	turn r_thigh to x-axis <30> now;
	turn l_thigh to x-axis <30> now;
}
/*
RestoreAfterDelay() {
	sleep RESTORE_DELAY;
	turn head to y-axis 0 speed <90>;
	turn l_tube to x-axis 0 speed <45>;
	turn r_tube to x-axis 0 speed <45>;
	move l_missile to z-axis [0] now;
	move r_missile to z-axis [0] now;
}
*/
RestoreAfterDelayLeft() {
	sleep RESTORE_DELAY;
	turn l_tube to x-axis 0 speed <45>;
	move l_missile to z-axis [0] now;
	move l_missile to y-axis [.4] now;
	move l_missile to x-axis [-3.2] now;
	wait-for-turn l_tube around x-axis;
	show l_missile;
	move l_door to z-axis [0.5] speed [1];
	move l_doorslid to z-axis [-1] speed [1];
	wait-for-move l_doorslid along z-axis;
	turn l_door to z-axis <-100> speed <90>;
	wait-for-turn l_door around z-axis;
	spin l_missile around z-axis speed <-90>;
	move l_missile to y-axis [0] speed [.4];
	move l_missile to x-axis [0] speed [2];
	wait-for-move l_missile along x-axis;
	spin l_missile around z-axis speed <0>;
	move l_door to z-axis [0] speed [1];
	move l_doorslid to z-axis [0] speed [1];
	turn l_door to z-axis <0> speed <90>;
	
	sleep 3000;
	turn head to y-axis 0 speed <90>;
	turn r_tube to x-axis 0 speed <45>;
}

RestoreAfterDelayRight() {
	sleep RESTORE_DELAY;
	turn r_tube to x-axis 0 speed <45>;
	move r_missile to z-axis [0] now;
	move r_missile to y-axis [.4] now;
	move r_missile to x-axis [3.2] now;
	wait-for-turn r_tube around x-axis;
	show r_missile;
	move r_door to z-axis [0.5] speed [1];
	move r_doorslid to z-axis [-1] speed [1];
	wait-for-move r_doorslid along z-axis;
	turn r_door to z-axis <100> speed <90>;
	wait-for-turn r_door around z-axis;
	spin r_missile around z-axis speed <90>;
	move r_missile to y-axis [0] speed [.4];
	move r_missile to x-axis [0] speed [2];
	wait-for-move r_missile along x-axis;
	spin r_missile around z-axis speed <0>;
	move r_door to z-axis [0] speed [1];
	move r_doorslid to z-axis [0] speed [1];
	turn r_door to z-axis <0> speed <90>;
	
	sleep 2000;
	turn head to y-axis 0 speed <90>;
	turn l_tube to x-axis 0 speed <45>;
}

AimWeapon1(heading, pitch) 
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn head to y-axis heading speed <90>;
	if (gun_1)
	{
		turn l_tube to x-axis 0 - pitch speed <45>;
		wait-for-turn head around y-axis;
		wait-for-turn l_tube around x-axis;
	}
	if (!gun_1)
	{
		turn r_tube to x-axis 0 - pitch speed <45>;
		wait-for-turn head around y-axis;
		wait-for-turn r_tube around x-axis;
	}
	return 1;
}

AimFromWeapon1(piecenum) 
{
	piecenum = head;
}

QueryWeapon1(piecenum) 
{
	if (gun_1) piecenum = l_missile;
	else piecenum = r_missile;
}

FireWeapon1() 
{
	if (gun_1) 
	{
		move l_missile to z-axis [2] speed [100];
		wait-for-move l_missile along z-axis;
		hide l_missile;
		start-script RestoreAfterDelayLeft();
	}
	
	else 
	{
		move r_missile to z-axis [2] speed [100];
		wait-for-move r_missile along z-axis;
		hide r_missile;
		start-script RestoreAfterDelayRight();
	}
	
	gun_1 = !gun_1;
	//start-script RestoreAfterDelay();
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode r_tube type BITMAPONLY | BITMAP2;
		explode l_missile type BITMAPONLY | BITMAP3;
		explode l_foot type BITMAPONLY | BITMAP4;
		explode l_leg type BITMAPONLY | BITMAP5;
		explode l_thigh type BITMAPONLY | BITMAP1;
		explode popup type BITMAPONLY | BITMAP2;
		explode r_missile type BITMAPONLY | BITMAP3;
		explode r_foot type BITMAPONLY | BITMAP4;
		explode r_leg type BITMAPONLY | BITMAP5;
		explode r_thigh type BITMAPONLY | BITMAP1;
		explode head type BITMAPONLY | BITMAP2;
		explode l_tube type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | BITMAP1;
		explode r_tube type SHATTER | BITMAP2;
		explode l_missile type FALL | BITMAP3;
		explode l_foot type FALL | BITMAP4;
		explode l_leg type FALL | BITMAP5;
		explode l_thigh type FALL | BITMAP1;
		explode popup type FALL | BITMAP2;
		explode r_missile type FALL | BITMAP3;
		explode r_foot type FALL | BITMAP4;
		explode r_leg type FALL | BITMAP5;
		explode r_thigh type FALL | BITMAP1;
		explode head type FALL | BITMAP2;
		explode l_tube type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode r_tube type SHATTER | BITMAP2;
		explode l_missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode l_foot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode l_leg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode l_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode popup type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode r_missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode r_foot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode r_leg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode r_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode l_tube type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode r_tube type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode l_missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode l_foot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode l_leg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode l_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode popup type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode r_missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode r_foot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode r_leg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode r_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode l_tube type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}

