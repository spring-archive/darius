#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece	base, front, bigwheel, 
		turret, arm_1, arm_2, arm_3, dish, 
		panel_a1, panel_b1, panel_a2, panel_b2,
		rear, 
		tracks1, tracks2, tracks3, tracks4,
		wheels1, wheels2, wheels3, wheels4;
		
static-var tracks;

// Signal definitions
#define SIG_ACTIVATE			2
#define SIG_MOVE				4

#define WHEEL_SPIN_SPEED_S		<540>
#define WHEEL_SPIN_SPEED_M		<360>
#define WHEEL_SPIN_SPEED_L		<180>
#define WHEEL_SPIN_ACCEL_S		<15>
#define WHEEL_SPIN_ACCEL_M		<10>
#define WHEEL_SPIN_ACCEL_L		<5>
#define WHEEL_SPIN_DECEL_S		<45>
#define WHEEL_SPIN_DECEL_M		<30>
#define WHEEL_SPIN_DECEL_L		<15>

#define DEPLOY_SPEED			<90>
#define TURRET_SPEED			<60>
#define TURRET_ACCEL			<2>

#define ANIM_PERIOD				50
#define PIVOT_MOD				11 //appox. equal to MAX_PIVOT / turnrate
#define MAX_PIVOT				<14>
#define MIN_PIVOT				<-14>
#define PIVOT_SPEED				<60>

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

AnimControl() {
	var lastHeading, currHeading, diffHeading, pivotAngle;
	lastHeading = GET HEADING;
	while (1) {
		//tracks
		++tracks;
		if (tracks == 2) {
			hide tracks1;
			show tracks2;
		} else if (tracks == 3) {
			hide tracks2;
			show tracks3;
		} else if (tracks == 4) {
			hide tracks3;
			show tracks4;
		} else {
			tracks = 1;
			hide tracks4;
			show tracks1;
		}
		
		//pivot
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		if (diffHeading > 0x7fff) diffHeading = diffHeading - 0x10000;
		if (diffHeading < -0x8000) diffHeading = diffHeading + 0x10000;
		pivotAngle = diffHeading * PIVOT_MOD;
		if (pivotAngle > MAX_PIVOT) pivotAngle = MAX_PIVOT;
		if (pivotAngle < MIN_PIVOT) pivotAngle = MIN_PIVOT;
		turn front to y-axis pivotAngle speed PIVOT_SPEED;
		turn rear to y-axis 0 - pivotAngle speed PIVOT_SPEED;
		
		lastHeading = currHeading;
		sleep ANIM_PERIOD;
	}
}


Create()
{
	start-script SmokeUnit();
}

Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	turn arm_1 to x-axis <-90> speed DEPLOY_SPEED;
	wait-for-turn arm_1 around x-axis;
	
	turn arm_2 to x-axis <30> speed DEPLOY_SPEED;
	turn arm_3 to x-axis <-40> speed DEPLOY_SPEED;
	wait-for-turn arm_2 around x-axis;
	wait-for-turn arm_3 around x-axis;
	
	turn panel_a1 to z-axis <30> speed DEPLOY_SPEED;
	turn panel_a2 to z-axis <-30> speed DEPLOY_SPEED;
	turn panel_b1 to z-axis <-30> speed DEPLOY_SPEED;
	turn panel_b2 to z-axis <30> speed DEPLOY_SPEED;
	wait-for-turn panel_a1 around z-axis;
	wait-for-turn panel_a2 around z-axis;
	wait-for-turn panel_b1 around z-axis;
	wait-for-turn panel_b2 around z-axis;
	
	spin turret around y-axis speed TURRET_SPEED accelerate TURRET_ACCEL;
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	turn turret to y-axis 0 speed TURRET_SPEED;
	wait-for-turn turret around y-axis;
	
	turn panel_a1 to z-axis 0 speed DEPLOY_SPEED;
	turn panel_a2 to z-axis 0 speed DEPLOY_SPEED;
	turn panel_b1 to z-axis 0 speed DEPLOY_SPEED;
	turn panel_b2 to z-axis 0 speed DEPLOY_SPEED;
	wait-for-turn panel_a1 around z-axis;
	wait-for-turn panel_a2 around z-axis;
	wait-for-turn panel_b1 around z-axis;
	wait-for-turn panel_b2 around z-axis;
	
	turn arm_2 to x-axis 0 speed DEPLOY_SPEED;
	turn arm_3 to x-axis 0 speed DEPLOY_SPEED;
	wait-for-turn arm_2 around x-axis;
	wait-for-turn arm_3 around x-axis;
	
	turn arm_1 to x-axis 0 speed DEPLOY_SPEED;
}

StartMoving() {
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script AnimControl();
	spin bigwheel around x-axis speed WHEEL_SPIN_SPEED_L accelerate WHEEL_SPIN_ACCEL_L;

	spin wheels1 around x-axis speed WHEEL_SPIN_SPEED_M accelerate WHEEL_SPIN_ACCEL_M;
	spin wheels4 around x-axis speed WHEEL_SPIN_SPEED_M accelerate WHEEL_SPIN_ACCEL_M;
	
	spin wheels2 around x-axis speed WHEEL_SPIN_SPEED_S accelerate WHEEL_SPIN_ACCEL_S;
	spin wheels3 around x-axis speed WHEEL_SPIN_SPEED_S accelerate WHEEL_SPIN_ACCEL_S;
}

StopMoving() {
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	stop-spin bigwheel around x-axis decelerate WHEEL_SPIN_DECEL_L;

	stop-spin wheels1 around x-axis decelerate WHEEL_SPIN_DECEL_M;
	stop-spin wheels4 around x-axis decelerate WHEEL_SPIN_DECEL_M;
	
	stop-spin wheels2 around x-axis decelerate WHEEL_SPIN_DECEL_S;
	stop-spin wheels3 around x-axis decelerate WHEEL_SPIN_DECEL_S;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode front type BITMAPONLY | BITMAP1;
		explode rear type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode front type BITMAPONLY | BITMAP1;
		explode rear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode front type BITMAPONLY | BITMAP1;
		explode rear type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode front type BITMAPONLY | BITMAP1;
	explode rear type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
