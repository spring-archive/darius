#define TA			// This is a TA script

#include "constants.h"

piece  aim, fire, base, flare, body, gun, barrel, casings, frame, door1, door2, door3, door4, hole, shell;

static-var  Static_Var_1, restore_delay, gun_1, statechg_DesiredState, statechg_StateChanging, gh;

// Signal definitions
#define SIG_AIM				2

Activatescr()
{
	if( gh )
	{
		move door1 to y-axis [0.000000] now;
		move door1 to y-axis [-3.000000] speed [8.000000];
		move door2 to y-axis [0.000000] now;
		move door2 to y-axis [-3.000000] speed [8.000000];
		move door3 to y-axis [0.000000] now;
		move door3 to y-axis [-3.000000] speed [8.000000];
		move door4 to y-axis [0.000000] now;
		move door4 to y-axis [-3.000000] speed [8.000000];
		turn door1 to x-axis <90.000000> now;
		turn door1 to x-axis <0.000000> speed <225.000000>;
		turn door2 to z-axis <-90.000000> now;
		turn door2 to z-axis <0.000000> speed <225.000000>;
		turn door3 to x-axis <-90.000000> now;
		turn door3 to x-axis <0.000000> speed <225.000000>;
		turn door4 to z-axis <90.000000> now;
		turn door4 to z-axis <0.000000> speed <225.000000>;
		move body to y-axis [0.000000] speed [180.000000];
		sleep 100;
	} else {
		turn base to x-axis 0 speed <225>;
	}
	sleep 25;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Deactivatescr()
{
	turn barrel to x-axis <-90.000000> speed <180>;
	if( gh )
	{
		move body to y-axis [-55.000000] speed [60.000000];
		wait-for-move body along y-axis;
		move door1 to y-axis [0.000000] now;
		move door1 to y-axis [0.000000] speed [0.000000];
		move door2 to y-axis [0.000000] now;
		move door2 to y-axis [0.000000] speed [0.000000];
		move door3 to y-axis [0.000000] now;
		move door3 to y-axis [0.000000] speed [0.000000];
		move door4 to y-axis [0.000000] now;
		move door4 to y-axis [0.000000] speed [0.000000];
		turn door1 to x-axis <90.021978> speed <225.000000>;
		turn door2 to z-axis <-90.021978> speed <225.000000>;
		turn door3 to x-axis <-90.021978> speed <225.000000>;
		turn door4 to z-axis <90.021978> speed <225.000000>;
		sleep 300;
	} else {
		turn base to x-axis <180> speed <225>;
	}
	sleep 15;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	if( !Static_Var_1 )
	{
		call-script Activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	sleep 1000;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script Deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn barrel to x-axis <0.000000> speed <30.005495>;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	gh = GET GROUND_HEIGHT(GET UNIT_XZ);
	if (gh) {
		hide shell;
	} else {
		hide hole;
		hide frame;
		hide door1;
		hide door2;
		hide door3;
		hide door4;
	}
	dont-shade body;
	dont-shade barrel;
	hide flare;
	spin flare around z-axis speed <350.016484>;
	restore_delay = 2000;
	gun_1 = fire;
	start-script SmokeUnit();
	hide casings;
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	Static_Var_1 = 1;
	restore_delay = 3000;
	call-script InitState();
	start-script RequestState(0);
	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

QueryPrimary(piecenum)
{
	piecenum = fire;
}

AimFromPrimary(piecenum)
{
	piecenum = aim;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn body to y-axis heading speed <700.005495>;
	turn barrel to x-axis <0.000000> - pitch speed <500.010989>;
	wait-for-turn body around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1025 from casings;
	if( gun_1 == 1 )
	{
		emit-sfx 1024 from flare;
		////emit-sfx 1025 from casings;
		turn gun to z-axis <60.010989> speed <1800.043956>;
		//wait-for-turn gun around z-axis;
		gun_1 = base;
		return (0);
	}
	if( gun_1 == 2 )
	{
		emit-sfx 1024 from flare;
		//emit-sfx 1025 from casings;
		turn gun to z-axis <120.027473> speed <1800.043956>;
		//wait-for-turn gun around z-axis;
		gun_1 = flare;
		return (0);
	}
	if( gun_1 == 3 )
	{
		emit-sfx 1024 from flare;
		//emit-sfx 1025 from casings;
		turn gun to z-axis <180.043956> speed <1800.043956>;
		//wait-for-turn gun around z-axis;
		gun_1 = body;
		return (0);
	}
	if( gun_1 == 4 )
	{
		emit-sfx 1024 from flare;
		//emit-sfx 1025 from casings;
		turn gun to z-axis <240.054945> speed <380.043956>;
		//wait-for-turn gun around z-axis;
		gun_1 = gun;
		return (0);
	}
	if( gun_1 == 5 )
	{
		emit-sfx 1024 from flare;
		//emit-sfx 1025 from casings;
		turn gun to z-axis <300.071429> speed <380.043956>;
		//wait-for-turn gun around z-axis;
		gun_1 = barrel;
		return (0);
	}
	if( gun_1 == 6 )
	{
		emit-sfx 1024 from flare;
		//emit-sfx 1025 from casings;
		turn gun to z-axis <0.000000> speed <380.043956>;
		//wait-for-turn gun around z-axis;
		gun_1 = fire;
		return (0);
	}
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode fire type BITMAPONLY | BITMAP4;
		explode fire type BITMAPONLY | BITMAP5;
		explode body type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		explode aim type SMOKE;
		explode fire type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 40 )
	{
		corpsetype = 2;
		explode aim type SMOKE;
		explode fire type SMOKE;
		explode base type BITMAPONLY | BITMAP3;
		explode fire type SMOKE;
		explode barrel type SHATTER | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 80 )
	{
		corpsetype = 3;
		explode aim type SMOKE;
		explode fire type SMOKE;
		explode aim type SMOKE;
		explode fire type SMOKE;
		explode base type BITMAP3;
		explode fire type SMOKE;
		explode body type BITMAP1;
		explode barrel type BITMAP1;
		explode gun type BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode aim type SMOKE;
	explode fire type SMOKE;
	explode aim type SMOKE;
	explode fire type SMOKE;
	explode aim type SMOKE;
	explode fire type SMOKE;
	explode aim type SMOKE;
	explode fire type SMOKE;
	explode base type BITMAP3;
	explode fire type SMOKE;
	explode barrel type BITMAP1;
	explode body type BITMAP1;
	explode gun type BITMAP2;
	explode gun type SMOKE;
}
