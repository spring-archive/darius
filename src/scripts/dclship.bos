#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece	base, body, turret, firepoint, wake1, wake2;

static-var  gun_1, restore_delay, bMoving, gun_1_yaw;

// Signal definitions
#define SIG_AIM					4

//rockz
#define ROCK_PIECE				base	//piece to rock
#define ROCK_Z_SPEED			3		//number of quarter-cycles per second around z-axis
#define ROCK_Z_DECAY			-1/2	//rocking around z-axis is reduced by this factor each time; should be negative to alternate rocking direction
#define ROCK_Z_MIN              <0.5>	//if around z-axis rock is not greater than this amount rocking will stop after returning to center
#define SIG_ROCK_Z				16		//signal to prevent multiple rocking
#include "rockz.h"

#define ROCK_Z_FIRE_1			-5

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

EmitWakes()
{
	while( TRUE )
	{
		if( bMoving )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 150;
	}
}

Create()
{
	bMoving = FALSE;
	restore_delay = 3000;
	call-script RockZInit();
	start-script SmokeUnit();
	start-script EmitWakes();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <35.000000>;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <150.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1() {
	start-script RockZ(ROCK_Z_FIRE_1, gun_1_yaw);
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

QueryWeapon1(piecenum) {
	piecenum = firepoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype){
	explode body type BITMAPONLY | BITMAP1;
	if( severity <= 25 ) {
		corpsetype = 1;
		explode turret type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
	} else if( severity <= 50 ) {
		corpsetype = 2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
	} else {
		corpsetype = 3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
	}
}
