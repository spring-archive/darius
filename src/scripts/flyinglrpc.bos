#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, base, flare, muzzle, turret, barrel, barrel_back, sleeve, wing2top, wing3top ;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	hide muzzle;
	hide barrel_back;
	dont-cache flare;
	dont-cache barrel;
	dont-cache sleeve;
	dont-cache turret;	
	start-script SmokeUnit();	
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	//turn turret to y-axis heading speed <200.000000>;
	//turn sleeve to x-axis <0.000000> - pitch speed <80.000000>;
	//wait-for-turn turret around y-axis;
	//wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	//emit-sfx 1024+0 from ground;
	move barrel to z-axis [-8.000000] speed [500.000000];
	//emit-sfx 1024+1 from barrel_back;
	//emit-sfx 1024+2 from muzzle;
	//show flare;
	//sleep 200;
	//hide flare;
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.000000] speed [3.500000];
}

TargetCleared(Func_Var_1)
{
	if( Func_Var_1 == 1 )
	{
		signal SIG_AIM;
		//stop-spin turret around y-axis;
		//stop-spin sleeve around x-axis;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type BITMAPONLY | BITMAP3;
		explode sleeve type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | BITMAP3;
		explode sleeve type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 1;
	explode barrel type BITMAPONLY | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
