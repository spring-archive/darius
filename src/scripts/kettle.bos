#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fanbox, vent1, vent2, fan, turret, sleeve, barrel1,
       flare1, barrel2, flare2, barrel3, flare3;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_FIRE			4

#define RECOIL_DISTANCE		[-3]
#define RECOIL_RESTORE_SPEED	[1]


#include "StateChg.h"
Go()
{
}

Stop()
{
}
#define ACTIVATECMD		call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	spin fan around y-axis speed <-240>;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

SmokeVents()
{
	while( TRUE )
	{
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		sleep 1000;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade flare3;
	dont-shade vent1;
	dont-shade vent2;
	dont-cache fan;
	dont-cache sleeve;
	gun_1 = 1;
	start-script SmokeUnit();
	start-script SmokeVents();
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <150.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FireWeapon1() {
	//gun_1 = 0;
	signal SIG_FIRE;
	set-signal-mask SIG_FIRE;
	
	set ACTIVATION to 0;

	sleep 500;
	set ACTIVATION to 1;

}

Shot1() {
	/*
	++gun_1;
	if (gun_1 == 1) {
		move barrel1 to z-axis RECOIL_DISTANCE now;
		move barrel1 to z-axis [0] speed RECOIL_RESTORE_SPEED;
	} else if (gun_1 == 2) {
		move barrel2 to z-axis RECOIL_DISTANCE now;
		move barrel2 to z-axis [0] speed RECOIL_RESTORE_SPEED;
	} else {
		move barrel3 to z-axis RECOIL_DISTANCE now;
		move barrel3 to z-axis [0] speed RECOIL_RESTORE_SPEED;
		gun_1 = 1;
	}
	*/
}

QueryWeapon1(piecenum)
{
	++gun_1;
	
	if( gun_1 == 1 ) {
		piecenum = flare1;
	} else if( gun_1 == 2 ) {
		piecenum = flare2;
	} else {
		piecenum = flare3;
		gun_1 = 0;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = sleeve;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide sleeve;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | BITMAP3;
		explode fanbox type BITMAPONLY | BITMAP1;
		explode vent1 type BITMAPONLY | BITMAP1;
		explode vent2 type BITMAPONLY | BITMAP1;
		explode fan type FALL | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP2;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode barrel3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP3;
		explode fanbox type BITMAPONLY | BITMAP2;
		explode vent1 type BITMAPONLY | BITMAP2;
		explode vent2 type BITMAPONLY | BITMAP2;
		explode fan type FALL | BITMAP1;
		explode turret type FALL | SMOKE | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode barrel3 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP3;
		explode fanbox type BITMAPONLY | BITMAP2;
		explode vent1 type BITMAPONLY | BITMAP2;
		explode vent2 type BITMAPONLY | BITMAP2;
		explode fan type FALL | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode barrel3 type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP3;
	explode fanbox type BITMAPONLY | BITMAP2;
	explode vent1 type BITMAPONLY | BITMAP2;
	explode vent2 type BITMAPONLY | BITMAP2;
	explode fan type FALL | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type BITMAPONLY | BITMAP3;
	explode barrel2 type BITMAPONLY | BITMAP3;
	explode barrel3 type BITMAPONLY | BITMAP3;
}
