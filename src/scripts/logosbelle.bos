#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, gun1, gun2, gun3, vent1, vent2, vent3;

static-var  ventnum;

// Signal definitions
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			16
#define SIG_AIM_4			32

#define SIG_MOV				2

#define RESTORE_DELAY		3000

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	ventnum = 1;
	start-script SmokeUnit();
	sleep 1500;
	
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = gun1;
}

QuerySecondary(piecenum)
{
	piecenum = gun2;
}

QueryTertiary(piecenum)
{
	piecenum = gun3;
}

QueryWeapon4(piecenum)
{
	++ventnum;
	
	if( ventnum == 1 ) {
		piecenum = vent1;
	} else if( ventnum == 2 ) {
		piecenum = vent2;
	} else {
		piecenum = vent3;
		ventnum = 0;
	}	
	
	
	
}

RestoreAfterDelay()
{
	sleep RESTORE_DELAY;
	turn base to y-axis <0.000000> speed <250.000000>;
	turn base to x-axis <0.000000> speed <250.000000>;
	//turn body to y-axis <0.000000> speed <150.000000>;
	//turn body to x-axis <0.000000> speed <150.000000>;
}

Activate()
{
	signal SIG_MOV;
	set-signal-mask SIG_MOV;
	/*
	spin bladestop around y-axis speed <600.357143> accelerate <50.005495>;
	spin bladesbottom around y-axis speed <-600.357143> accelerate <50.005495>;
	turn wing2top to z-axis <90.016484> speed <30.000000>;
	turn wing3top to z-axis <-90.016484> speed <30.000000>;
	wait-for-turn wing2top around z-axis;
	wait-for-turn wing3top around z-axis;
	*/
}

StopMoving()
{
	signal SIG_MOV;
	set-signal-mask SIG_MOV;
	/*
	stop-spin bladestop around y-axis decelerate <20.005495>;
	stop-spin bladesbottom around y-axis decelerate <20.005495>;
	turn wing2top to z-axis <0.000000> speed <30.000000>;
	turn wing3top to z-axis <0.000000> speed <30.000000>;
	wait-for-turn wing2top around z-axis;
	wait-for-turn wing3top around z-axis;
	*/
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn gun1 to y-axis heading speed <200.000000>;
	turn gun1 to x-axis pitch speed <200.000000>;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn gun2 to x-axis 0-heading speed <200.000000>;
	turn gun2 to y-axis 0-pitch speed <200.000000>;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	//turn gun3 to x-axis heading speed <200.000000>;
	//turn gun3 to y-axis pitch speed <200.000000>;
	return (1);
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	//turn vent1 to x-axis heading speed <200.000000>;
	//turn vent1 to y-axis pitch speed <200.000000>;
	return (1);
}


FirePrimary()
{
}

FireSecondary()
{
}

FireTertiary()
{
}

FireWeapon4()
{
}

Killed(severity, corpsetype)
{
/*
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		/*
		explode ring type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode wing1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode wing2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode wing3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode sphere1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode sphere2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode sphere3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode wing2top type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode wing3top type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode gun3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		
		explode bladestop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode bladesbottom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		
		return (0);
	}
	corpsetype = 1;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	/*
	explode ring type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode wing1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode wing2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode wing3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode sphere1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode sphere2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode sphere3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode wing2top type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode wing3top type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Turret3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode bladestop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode bladesbottom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	*/
}
