#include "constants.h"

piece  hull, neck, turret, arml, armr, flare1, flare2, flare3, flare4, exhaust1, exhaust2, exhaust3, exhaust4, wake1, wake2, light;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8

#define RESTORE_DELAY		3000


Standby()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 100;
	}
	while( TRUE )
	{
		emit-sfx 1024 + 2 from light;
		sleep 2000;
	}
	sleep 50;
	start-script Standby();
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	gun_1 = 0;
	start-script SmokeUnit();
	start-script Standby();
	return (0);
}

RestoreAfterDelay()
{
	sleep RESTORE_DELAY;
	turn turret to y-axis <0.> speed <90.>;
	turn arml to x-axis <0.> speed <50.>;
	turn armr to x-axis <0.> speed <50.>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <450.>;
	turn arml to x-axis <0.> - pitch speed <250.>;
	turn armr to x-axis <0.> - pitch speed <250.>;
	wait-for-turn turret around y-axis;
	wait-for-turn arml around x-axis;
	wait-for-turn armr around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	gun_1 = (gun_1+1);
	if (gun_1 == 4)
	{
		gun_1 = 0;
	}
}

Shot1() {
	if( gun_1 == 0 )
	{
		emit-sfx 1025 from flare1;
		emit-sfx 1024 from exhaust1;
	}
	else if( gun_1 == 1 )
	{
		emit-sfx 1025 from flare2;
		emit-sfx 1024 from exhaust2;
	}
	else if( gun_1 == 2 )
	{
		emit-sfx 1025 from flare4;
		emit-sfx 1024 from exhaust4;
	}
	else if( gun_1 == 3 )
	{
		emit-sfx 1025 from flare4;
		emit-sfx 1024 from exhaust4;
	}	
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	else if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	else if( gun_1 == 2 )
	{
		piecenum = flare3;
	}
	else if( gun_1 == 3 )
	{
		piecenum = flare4;
	}	
	
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hull type BITMAPONLY;
		explode neck type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode arml type BITMAPONLY;
		explode armr type BITMAPONLY;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hull type BITMAPONLY;
		explode neck type BITMAPONLY;
		explode turret type FALL;
		explode arml type FALL | SMOKE | FIRE;
		explode armr type FALL | SMOKE | FIRE;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode hull type BITMAPONLY;
		explode neck type FALL | SMOKE;
		explode turret type FALL | SMOKE | FIRE;
		explode arml type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode armr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (0);
	}
	corpsetype = 3;
	explode hull type BITMAPONLY;
	explode neck type FALL | SMOKE;
	explode turret type FALL | SMOKE | FIRE;
	explode arml type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode armr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (0);
}
