#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, imma_chargin, mah_lazer, downbeam, shoop_da_woop;

static-var  on, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2

#define TARGET_ALT			143565270

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

TargetingLaser()
{
	while( on == 1 )
	{
		emit-sfx 2049 from mah_lazer;
		emit-sfx 2049 from downbeam;
		sleep 30;
	}
}


Activate()
{
	move shoop_da_woop to y-axis TARGET_ALT speed [30];
	start-script TargetingLaser();
	on = 1;
	wait-for-move shoop_da_woop along y-axis;
}

Deactivate()
{
	move shoop_da_woop to y-axis 0 speed [250];
	on = 0;
	wait-for-move shoop_da_woop along y-axis;
}

Create()
{
	turn mah_lazer to x-axis <90> now;
	turn downbeam to x-axis <90> now;
	hide mah_lazer;
	hide downbeam;
	start-script SmokeUnit();
	while (GET BUILD_PERCENT_LEFT) sleep 400;
}

AimWeapon1(heading, pitch)
{
	while (on == 1)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn mah_lazer to y-axis heading speed 900;
	turn mah_lazer to x-axis <0.000000> - pitch speed 300;
	wait-for-turn mah_lazer around y-axis;
	wait-for-turn mah_lazer around x-axis;
	return (1);
	}
	return (0);
}

FireWeapon1()
{
	return (0);
}

QueryWeapon1(piecenum)
{
	piecenum = mah_lazer;
}

AimFromWeapon1(piecenum)
{
	piecenum = mah_lazer;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
}
