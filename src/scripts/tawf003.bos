#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wheel1, wheel2, wheel3, wheel4, turret, sleeve, barrel;

// Signal definitions
#define SIG_AIM				2
#define RESTORE_DELAY		3000


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.016484>;
	turn base to x-axis Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

StartMoving()
{
	spin wheel1 around x-axis speed <150.027473>;
	spin wheel2 around x-axis speed <150.027473>;
	spin wheel3 around x-axis speed <150.027473>;
	spin wheel4 around x-axis speed <150.027473>;
}

StopMoving()
{
	stop-spin wheel1 around x-axis;
	stop-spin wheel2 around x-axis;
	stop-spin wheel3 around x-axis;
	stop-spin wheel4 around x-axis;
}

Create()
{
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <60>;
	turn sleeve to x-axis <0.000000> speed <60>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <300>;
	turn sleeve to x-axis <0.000000> - pitch speed <300>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{

}

AimFromWeapon1(piecenum)
{
	piecenum = sleeve;
}

QueryWeapon1(piecenum)
{
	piecenum = barrel;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
